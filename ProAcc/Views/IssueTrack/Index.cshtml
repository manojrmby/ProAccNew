@model IEnumerable<ProACC_DB.Issuetrack>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/shared/_Layout.cshtml";
}


@Styles.Render("~/Content/css/jqGrid")
@Scripts.Render("~/bundles/Scripts/jqGrid")
<style>
    .wrapColumnText {
        white-space: normal !important;
        height: auto;
        vertical-align: text-top;
    }

    .fit_Data {
        width: fit-content;
    }

    .ui-jqgrid .ui-jqgrid-labels th.ui-th-column {
        background-color: orange;
        background-image: none
    }

    #info_dialog {
        margin-left: 150vh;
    }
</style>

<script>
    //$.jgrid.defaults.width =1000;
    $.jgrid.defaults.responsive = true;
    $.jgrid.defaults.styleUI = 'Bootstrap4';
    $.jgrid.defaults.iconSet = "Octicons";
</script>
<style>
    .ui-jqgrid {
        font-size: 0.8rem
    }

    th.ui-th-column div {
        white-space: normal !important;
        height: auto !important;
        padding: 2px;
        text-align: center;
    }

    .ui-jqgrid .ui-jqgrid-view input, .ui-jqgrid .ui-jqgrid-view select, .ui-jqgrid .ui-jqgrid-view textarea, .ui-jqgrid .ui-jqgrid-view button {
        font-size: 11px !important;
    }

    .ui-jqgrid .ui-jqgrid-bdiv {
        overflow-y: scroll
    }

    #jqGridPager_center {
        visibility: hidden;
    }

    .fixed-sidebar .app-sidebar {
        height: 100% !important;
    }

    .app-main {
        flex: 1;
        display: flex;
        z-index: 8;
        position: relative;
        min-width: 100% !important;
    }

    .app-theme-white.app-container {
        background: #ffffff;
    }

    .app-container {
        min-height: 100%;
    }

    .ui-jqgrid .ui-jqgrid-labels th.ui-th-column {
        /*background-color: orange;
    background-image: none*/
        /*background: linear-gradient(to bottom, #33ccff 0%, #ff99cc 100%);*/
    }
</style>

<table id="mytable2">
</table>
<div id="pager2"></div>


<script>
    var status = "{ In progress:In progress; Completed:Completed;On hold:On hold;Resolved waiting for customer conformation:Resolved waiting for customer conformation;Re-opened:Re-opened;}";

    var EndDate = function (element, options) {
        debugger
        var ID = options.rowId;
        //var ST_Date=$('#').val();
        $(element).on('keypress', function (e) {
            e.preventDefault();
        })
        //var Date = $('#mytable2').jqGrid('getCell', ID, '_StartDate');
        $(element).datepicker({
            duration: "slow",
            dateFormat: "dd/mm/yy",
            autoSize: false,
            changeYear: true,
            changeMonth: true,
            showButtonPanel: false,
            showWeek: false,
            showButtonPanel: true,
           // minDate: Date,
            onClose: function (selectedDate) {
               // $("#" + ID + "_startDate").datepicker("option", "minDate", selectedDate);
                
            },
        });//.datepicker("setDate", new Date());
        // }).datepicker();
    };









    $(document).ready(function () {
        $("#mytable2").jqGrid({
            url: '@Url.Action("Getdata","IssueTrack")',
            datatype: "json",
            height: 280,
            colModel: [
                
                { label: 'Id', name: 'Issuetrack_Id', index: 'Issuetrack_Id', width: 150,hidden:true},
                { label: 'IssueName', name: 'IssueName', index: 'IssueName', width: 150, editable: false },
                {
                    label: 'Phase', name: 'PhaseID', index: 'PhaseID', width: 150, editable: false,
                     edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetPhaseDropDown()
                    }
                },
                { label: 'Task', name: 'TaskId', index: 'TaskId', width: 150, editable: false },
                {
                    label: 'Instance', name: 'ProjectInstance_Id', index: 'ProjectInstance_Id', width: 150, editable: false,hidden:true,
                    edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetInstanceDropDown()
                    }
                },
                { label: 'Start Date', name: 'StartDate', index: 'StartDate', width: 150, editable: false, formatter: "date", formatoptions: { newformat: "d/m/Y" } },
                {
                    label: 'End Date', name: 'EndDate', index: 'EndDate', width: 150, editable: true, formatter: "date", formatoptions: { newformat: "d/m/Y" },
                    editoptions: { dataInit: EndDate },
                },
                {
                    label: 'AssignedTo', name: 'AssignedTo', index: 'AssignedTo', width: 150, editable: false,
                     edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetUserDropDown()
                    }

                },
                {
                    label: 'Status', name: 'Status', index: 'Status', width: 150, editable: true, edittype: "select",
                    editoptions: {
                        value: status,
                    }
                },
                { label: 'Comment', name: 'Comments', index: 'Comments', width: 150, editable: false },
                { label: 'Comment', name: ' ', index: ' ', width: 150, editable: true },

                {
                    label: 'Action', name: 'myac', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',
                    formatoptions: {
                        keys: true,
                        delbutton: false,
                        align: "center",
                        onEdit: function(rowid) {
                            
                        }
                    }
                },

            ],

            rowNum: 10,
            viewrecords: true,
            rowList: [10, 20, 30],
            pager: '#pager2',
            sortable: true,
            sortname: 'Name',
            sortorder: "asc",
            grouping: true,
            caption: "Isuue Report",
            //onSelectRow: editRow

            
        });

    });


    //var lastSelection;
    //function editRow(id) {
    //    if (id && id !== lastSelection) {
    //        var grid = $("#jqGrid");
    //        grid.jqGrid('restoreRow', lastSelection);
    //        grid.jqGrid('editRow', id, { keys: true });
    //        lastSelection = id;
    //    }
    //}


  function GetUserDropDown() {
	var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetAllUser","ProjectMonitor")',
        dataType: "json",
		async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
            //debugger;
				for (var i = 0; i < Data.length; i++) {
                var obj = {};
                    var Name = Data[i].Name;
                var key = ""+Data[i].UserId;
                Parameters[key] = Name;
            }
        },
        error: function (data) {
            alert("GetAllUser fail");
        }
    });
	return Parameters;
    }

     function GetPhaseDropDown() {
				 var Parameters = {};
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetPhase","ProjectMonitor")',
                    //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
                    dataType: "json",
					async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {
						 for (var i = 0; i < Data.length; i++) {
                           var obj = {};
                             var PhaseName = Data[i].PhaseName;
                            var key = ""+Data[i].Id;
                            Parameters[key] = PhaseName;
                        }
                    },
                    error: function (data) {
                        alert("GetPhase fail");
                    }
                });
				return Parameters;
    }

    function GetInstanceDropDown() {
		 var Parameters = {};
         $.ajax({
            type: "POST",
                    url: '@Url.Action("GetInstance","IssueTrack")',
                    dataType: "json",
					async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {
						 for (var i = 0; i < Data.length; i++) {
                           var obj = {};
                             var PhaseName = Data[i].InstanceName;
                             var key = "" + Data[i].Instance_id;
                             Parameters[key] = PhaseName;
                        }
                    },
                    error: function (data) {
                        alert("GetProject fail");
                    }
         });
				return Parameters;
    }
</script>