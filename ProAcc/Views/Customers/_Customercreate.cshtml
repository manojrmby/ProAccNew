@model ProACC_DB.Customer
<style>
    .required::after {
        content: "*";
        font-weight: bold;
        color: red;
    }
    .ui-datepicker-trigger {
        position: absolute;
        left: 100%;
        top: 0em;
        width: 2.5em;
        /* padding: 1px; */
    }
</style>
<script type="text/javascript" src="~/Asset/scripts/CustomScripts/CustomerCreate.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <a class="card-title">New Customer</a>
    <div style="padding:1em;">
        <div class="col-md-12">
            <div class="row">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="col-md-6">
                    <div class="position-relative form-group">
                        @Html.LabelFor(model => model.Company_Name, "Customer Name", htmlAttributes: new { @class = "control-label col-md-10 required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Company_Name, new { htmlAttributes = new { @id = "txtName", @class = "form-control checkVal" } })
                            @Html.ValidationMessageFor(model => model.Company_Name, "", new { @class = "text-danger" })
                            <span id="lblName" style="color:red"></span>
                        </div>
                    </div>
                    <div class="position-relative form-group">
                        @Html.LabelFor(model => model.Company_Name, "Industry Sector", htmlAttributes: new { @class = "control-label col-md-5 required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Company_Name, new { htmlAttributes = new { @id = "txtwork", @class = "form-control checkVal"} })
                            @Html.ValidationMessageFor(model => model.Company_Name, "", new { @class = "text-danger" })
                            <span id="lblwork" style="color:red"></span>
                        </div>
                    </div>
                    <div class="position-relative form-group">
                        @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-5 required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @id = "txtMobId", @class = "form-control checkVal", @onchange = "ValidatePhoneNumber();", @maxlength = "10" } })
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                            <span id="lblMob" style="color:red"></span>
                        </div>
                    </div>

                    @*<div class="position-relative form-group">
                        @Html.LabelFor(model => model.AlternatePhone, "Alternate Phone", htmlAttributes: new { @class = "control-label col-md-5" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.AlternatePhone, new { htmlAttributes = new { @id = "txtAltMobId", @class = "form-control checkVal", @onchange = "ValidateAltPhoneNumber();", @maxlength = "10" } })
                            @Html.ValidationMessageFor(model => model.AlternatePhone, "", new { @class = "text-danger" })
                            <span id="lblAltMob" style="color:red"></span>
                        </div>
                    </div>*@



                    @*<div class="position-relative form-group">
                        @Html.LabelFor(model => model.UserName, "User Name", htmlAttributes: new { @class = "control-label col-md-5 required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @id = "CustomerUserName", @class = "form-control checkVal" } })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            <span id="Status1" style="color:red"></span>
                        </div>
                    </div>*@


                    @*<div class="position-relative form-group">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-5 required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @id = "txtPassword", @class = "form-control checkVal", @type = "password" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>*@


                    @*<div class="position-relative form-group">
                        <label class="control-label col-md-5 required">Confirm Password</label>
                        <div class="col-md-10">
                            <input type="password" class="form-control required" onchange="validatePwd()" id="txtConfirmPassword" />
                            <span id="lblAltPwd" style="color:red"></span>

                        </div>
                    </div>*@
                    
                </div>
                <div class="col-md-6">
                    @*<div class="position-relative form-group">
                        @Html.LabelFor(model => model.EstimatedSale, "Estimated Sale", htmlAttributes: new { @class = "control-label col-md-5 required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EstimatedSale, new { htmlAttributes = new { @id = "EstimatedSale", @class = "form-control checkVal" } })
                            @Html.ValidationMessageFor(model => model.EstimatedSale, "", new { @class = "text-danger" })
                            <span id="lblEstimatedSale" style="color:red"></span>
                        </div>
                    </div>*@
                    <div class="position-relative form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-5 required" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @id = "txtEmail", @class = "form-control checkVal", @onchange = "ValidateEmail();" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            <span id="lblEmail" style="color:red"></span>
                        </div>
                    </div>

                    @*<div class="position-relative form-group">
                        @Html.LabelFor(model => model.AlternateEmail, "Alternate Email", htmlAttributes: new { @class = "control-label col-md-5 checkVal" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.AlternateEmail, new { htmlAttributes = new { @id = "txtAltEmail", @class = "form-control", @onchange = "ValidateAltEmail();" } })
                            @Html.ValidationMessageFor(model => model.AlternateEmail, "", new { @class = "text-danger" })
                            <span id="lblAltEmail" style="color:red"></span>
                        </div>
                    </div>*@


                    @*<div class="position-relative form-group">
                        <label id="lbllastcontact" class="control-label col-md-5 required">Last Contact Date</label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.LastContact_Dt, "Last Contact Date", new { htmlAttributes = new { @id = "txtLastDt", @class = "form-control checkVal" } })
                            @Html.ValidationMessageFor(model => model.LastContact_Dt, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                    
                    @*<div class="position-relative form-group">
                        <label id="lblNextAction" class="control-label col-md-5 required">Next Action Date</label>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.NextAction_Dt, "Next Action Date", new { htmlAttributes = new { @id = "txtNextDt", @class = "form-control checkVal" } })
                            @Html.ValidationMessageFor(model => model.NextAction_Dt, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    @*<div class="position-relative form-group">
                        <label id="lblleadStatus" class="control-label col-md-5">Lead Status</label>
                        <div class="col-md-10">
                            @Html.DropDownList("LeadStatus", null, htmlAttributes: new { @class = "form-control checkVal" })
                            @Html.ValidationMessageFor(model => model.LeadStatus, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    @*<div class="position-relative form-group ">
                        <label id="lblleedSource" class="control-label col-md-5">Lead Source</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.LeadSource, "Lead Source", new { htmlAttributes = new { @class = "form-control checkVal" } })
                            @Html.ValidationMessageFor(model => model.LeadSource, "", new { @class = "text-danger" })
                        </div>
                    </div>*@


                </div>

            </div>
            @*<div class="position-relative form-group">
                @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control checkVal" } })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
            </div>*@
            <hr />
            <div class="row">
                <div class="col-lg-6">
                    <input type="submit" id="create" value="Create" class="btn btn-primary" onclick="Submit();" />
                </div>

                <div class="col-lg-6">
                    <p class="float-md-right"> @Html.ActionLink("Back to List", "Index","Customers")</p>
                   
                </div>
            </div>
        </div>
    </div>
}



<script type="text/javascript">

    $("#txtName").on('change', function () {
       
        var CustName = $("#txtName").val().trim();
        if (CustName == "") {
            $("#lblName").html("Please Enter valid Consultant name").show().fadeOut(2000);
        }
        else {
            $.ajax({
                url:  '@Url.Action("CheckCustomersNameAvailability","Customers")', //"/Customers/CheckCustomersNameAvailability",
                type: "GET",
                data: { namedata: CustName },
                dataType: "json",
                success: function (data) {
                    if (data != "success") {
                        $("#lblName").html("This Customer name is already taken,please select another").show();
                         ValidateButton();
                    }
                    else {
                        $("#lblName").html("").hide();
                         ValidateButton();
                    }
                },
                error: function (err) {
                    alert(err);
                }
            });
        }
        ValidateButton();
    });

     $("#CustomerUserName").on('change', function () {

        var CustUserName = $("#CustomerUserName").val().trim();
        if (CustUserName == "") {
            $("#lblName").html("Please Enter valid Customer User name").show().fadeOut(2000);
        }
        else {
            $.ajax({
                url: '@Url.Action("CheckConsultantsUsernameAvailability","Consultants")', //"/Consultants/CheckConsultantsUsernameAvailability",
                type: "GET",
                data: { userdata: CustUserName },
                dataType: "json",
                success: function (data) {
                    if (data != "success") {
                        $("#Status1").html("This User name is already taken,please select another").show();
                        ValidateButton();
                    }
                    else {
                        $("#Status1").html("").hide();
                        ValidateButton();
                    }
                },
                error: function (err) {
                    ValidateButton();
                    alert(err);
                }
            });
        }
        
    });

    function ValidateEmail() {
        //debugger;
        var email = document.getElementById("txtEmail").value;
        var lblEmail = document.getElementById("lblEmail");
        lblEmail.innerHTML = "";
        var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if (email == "" || !expr.test(email)) {
            lblEmail.innerHTML = "Please enter valid email address.";
            //result = "error";
            $("#create").prop("disabled", true);
            ValidateButton();
        }
        else {
            lblEmail.innerHTML = "";
            ValidateButton();
        }
    }

    function ValidateAltEmail() {
        //debugger;
        var Altemail = document.getElementById("txtAltEmail").value;
        var lblAltEmail = document.getElementById("lblAltEmail");
        lblAltEmail.innerHTML = "";
        var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if (Altemail == "") {
            lblAltEmail.innerHTML = "";
            $("#create").prop("disabled", true);
            ValidateButton();
        }
        else if (!expr.test(Altemail) && Altemail != "") {
            lblAltEmail.innerHTML = "Please enter valid email address.";
            $("#create").prop("disabled", true);
            ValidateButton();
        }
        else {
            lblAltEmail.innerHTML = "";
            ValidateButton();
        }
    }

    function validatePwd() {
        //debugger;
        var password = document.getElementById("txtPassword").value;
        var confirmPassword = document.getElementById("txtConfirmPassword").value;
        var lblAltPwd = document.getElementById("lblAltPwd");
        lblAltPwd.innerHTML = "";
        if (password != confirmPassword) {
            lblAltPwd.innerHTML = "Password does not match";
            //result = "error";
            $("#create").prop("disabled", true);
        }
        else {
            lblAltPwd.innerHTML = "";
            ValidateButton();
        }
    }

    function ValidatePhoneNumber() {
        //debugger;
        var mob = /^[1-9]{1}[0-9]{9}$/;
        var txtMobile = document.getElementById("txtMobId").value;
        var lblMob = document.getElementById("lblMob");
        lblMob.innerHTML = "";
        if (mob.test(txtMobile) == false) {
            lblMob.innerHTML = "Please enter valid mobile number.";
            //result = "error";
            $("#create").prop("disabled", true);
             ValidateButton();
        }
        else {
            lblMob.innerHTML = "";
            ValidateButton();
        }
    }
    function ValidateAltPhoneNumber() {
        //debugger;
        var mob = /^[1-9]{1}[0-9]{9}$/;
        var txtAltMobile = document.getElementById("txtAltMobId").value;
        var lblAltMob = document.getElementById("lblAltMob");
        lblAltMob.innerHtml = "";
        if (txtAltMobile == "") {
            lblAltMob.innerHTML = "";
            $("#create").prop("disabled", false);
             ValidateButton();
        }
        else if (mob.test(txtAltMobile) == false) {
            lblAltMob.innerHTML = "Please enter valid mobile number.";
            //result = "error";
            $("#create").prop("disabled", true);
            ValidateButton();
        }
        else {
            lblAltMob.innerHTML = "";
            ValidateButton();
        }
    }
     
    $(function () {
        var msg = '@ViewBag.Message';
        if (msg == 'True')
        {
        alert("Enter the Details");
        }
    });
    @*$(document).ready(function () {
        $("#create").prop("disabled", true);
        $("#txtName").keypress(function(event){
            var inputValue = event.which;
            // allow letters and whitespaces only.
            if (inputValue !=38) {
                if(!(inputValue >= 65 && inputValue <= 123) && (inputValue != 32 && inputValue != 0)) { 
                    event.preventDefault(); 
                    $("#lblName").html("Not Allowed").show().fadeOut("slow");
            }
            }
        });
        $("#txtwork").keypress(function(event){
            var inputValue = event.which;
            // allow letters and whitespaces only.
           
                if(!(inputValue >= 65 && inputValue <= 123) && (inputValue != 32 && inputValue != 0)) { 
                    event.preventDefault(); 
                    $("#lblwork").html("Not Allowed").show().fadeOut("slow");
            }
            
        });
        
        $("#EstimatedSale").keypress(function (e) {
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                $("#lblEstimatedSale").html("Money Only").show().fadeOut("slow");
                return false;
            }
        });
        $("#txtAltMobId").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#lblAltMob").html("Numbers Only").show().fadeOut("slow");
                return false;
            }
        });
        $("#txtMobId").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#lblMob").html("Numbers Only").show().fadeOut("slow");
                return false;
             }
        });

        $("#EstimatedSale").bind('copy paste cut', function (e) {
            e.preventDefault();
        });
        
        $("#txtName").on('change', function () {
            ValidateButton();
        });
     $("#txtwork").on('change', function () {
        ValidateButton();
     });
     $("#txtMobId").on('change', function () {
        ValidateButton();
     });
     $("#txtAltMobId").on('change', function () {
        ValidateButton();
     });
     $("#CustomerUserName").on('change', function () {
        ValidateButton();
     });
     $("#txtPassword").on('change', function () {
        ValidateButton();
     });
     $("#txtConfirmPassword").on('change', function () {
        ValidateButton();
     });
     $("#EstimatedSale").on('change', function () {
        ValidateButton();
     });
     $("#txtEmail").on('change', function () {
        ValidateButton();
     });
     $("#txtAltEmail").on('change', function () {
        ValidateButton();
     });
     $("#txtLastDt").on('change', function () {
        ValidateButton();
     });
     $("#txtNextDt").on('change', function () {
        ValidateButton();
     });
     $("#LeadStatus").on('change', function () {
        ValidateButton();
     });
    $("#LeadSource").on('change', function () {
        ValidateButton();
    });
    $("#Comments").on('change', function () {
        ValidateButton();
     });
    
        $('#CustomerUserName').on('change', function () {
            //debugger;
            $.ajax({
                type: "POST",
                url:'@Url.Action("CheckUsernameAvailability", "Consultants")',
                data: '{userdata: "' + $("#CustomerUserName").val()+ '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: OnSuccess,
                failure: function (response) {
                    alert(response);
                }
            });
        });
        
    });*@
  //$( function() {
  //  $( "#datepicker" ).datepicker();
  //  $( "#anim" ).on( "change", function() {
  //    $( "#datepicker" ).datepicker( "option", "showAnim", $( this ).val() );
  //  });
  //} );
//    $("#txtLastDt,#txtNextDt").keypress(function (e) {
//    return false;
//    });
//    $("#txtLastDt,#txtNextDt").keydown(function (e) {
//    return false;
//    });
//    $(function () {

//        $('#txtLastDt').focus(function(){
//    $('#txtLastDt').datepicker('show');
//        });
//          $('#txtNextDt').focus(function(){
//    $('#txtNextDt').datepicker('show');
//});


//        $("#txtLastDt,#txtNextDt").datepicker({
//            showOn: "button",
//            buttonImage: "/Asset/images/calendar-512.png",
//            buttonImageOnly: true,
//            buttonText: "Select date",
//            changeMonth: true,
//            changeYear: true,
//            beforeShow: function (textbox, instance) {
//                instance.dpDiv.css({
//                    marginLeft: textbox.offsetWidth + (-200) + 'px'
//                    //Here -176 is the width of my datepicker div, you can change according to your need.
//                });
//            }
//        });
//    } );
//    function OnSuccess(response) {
//        var msg = $("#Status1");
//        //debugger;
//        switch (response) {
//            case 1:
//                msg.show();
//                msg.css("color","red");
//                msg.html("User Name already exists.");
//                break;
//            case 0:
//                msg.show();
//                //msg.css("color","green");
//                msg.html("");
//                break;
//        }
//    }


   
    //var result = "success";

    //function ValidateName() {
    //    //debugger;
    //    var name = document.getElementById("txtName").value;
    //    var lblName = document.getElementById("lblName");
    //    lblName.innerHTML = "";
    //    var letters = /^[A-Za-z, ,&]+$/;
    //    if (name == "" || name == "&" || name == " " || !letters.test(name)) {
    //        lblName.innerHTML = "Please enter valid Name";
    //        //result = "error";
    //        $("#create").prop("disabled", true);
    //    } else {
    //        ValidateButton();
    //        //$("#create").prop("disabled", false);
    //        //result = "Success";
    //    }
    //    //validateSave();
    //}


    //function ValidateWork() {
    //    //debugger;
    //    var work = document.getElementById("txtwork").value;
    //    var lblwork = document.getElementById("lblwork");
    //    lblwork.innerHTML = "";
    //    var letters = /^[A-Za-z, ,&]+$/;
    //    if (work == "" || !letters.test(work)) {
    //        lblwork.innerHTML = "Please enter valid Industry Name";
    //        //result = "error";
    //        $("#create").prop("disabled", true);
    //    }
    //    else {
    //        $("#create").prop("disabled", false);
    //        //result = "Success";
    //    }
    //    // validateSave();
    //}

    //function ValidateComp()
    //  {
    //      //debugger;
    //      var Comp = document.getElementById("txtComp").value;
    //      var lblComp = document.getElementById("lblComp");
    //      lblComp.innerHTML = "";
    //      var letters = /^[A-Za-z, ]+$/;
    //    if (Comp == "" || !letters.test(Comp)) {
    //        lblComp.innerHTML = "Please enter a valid Company Name";
    //        result = "error"
    //    }
    //    else {
    //        result = "Success";
    //    }
    //    validateSave();

    //}
    
    //function ValidatePhoneNumber() {
    //    //debugger;
    //    var mob = /^[1-9]{1}[0-9]{9}$/;
    //    var txtMobile = document.getElementById("txtMobId").value;
    //    var lblMob = document.getElementById("lblMob");
    //    lblMob.innerHTML = "";
    //    if (mob.test(txtMobile) == false) {
    //        lblMob.innerHTML = "Please enter valid mobile number.";
    //        //result = "error";
    //        $("#create").prop("disabled", true);
    //    }
    //    else {
    //        lblMob.innerHTML = "";
    //        //result = "Success";
    //      ValidateButton();
    //    }
    //    //validateSave();
    //}
    //function ValidateAltPhoneNumber() {
    //    //debugger;
    //    var mob = /^[1-9]{1}[0-9]{9}$/;
    //    var txtAltMobile = document.getElementById("txtAltMobId").value;
    //    var lblAltMob = document.getElementById("lblAltMob");
    //    lblAltMob.innerHtml = "";
    //    if (txtAltMobile == "") {
    //        lblAltMob.innerHTML = "";
    //        $("#create").prop("disabled", false);
    //    }
    //    else if (mob.test(txtAltMobile) == false) {
    //        lblAltMob.innerHTML = "Please enter valid mobile number.";
    //        //result = "error";
    //        $("#create").prop("disabled", true);
    //    }
    //    else {
    //        lblAltMob.innerHTML = "";
    //        //result = "Success";
    //        ValidateButton();
    //    }
    //    // validateSave();
    //}
    //function ValidateEmail() {
    //    //debugger;
    //    var email = document.getElementById("txtEmail").value;
    //    var lblEmail = document.getElementById("lblEmail");
    //    lblEmail.innerHTML = "";
    //    var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
    //    if (email == "" || !expr.test(email)) {
    //        lblEmail.innerHTML = "Please enter valid email address.";
    //        //result = "error";
    //        $("#create").prop("disabled", true);
    //    }
    //    else {
    //        lblEmail.innerHTML = "";
    //        //result = "Success";
    //       ValidateButton();
    //    }
    //    //validateSave();
    //}

    //function ValidateAltEmail() {
    //    //debugger;
    //    var Altemail = document.getElementById("txtAltEmail").value;
    //    var lblAltEmail = document.getElementById("lblAltEmail");
    //    lblAltEmail.innerHTML = "";
    //    var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
    //    if (Altemail == "") {
    //        lblAltEmail.innerHTML = "";
    //        $("#create").prop("disabled", true);
    //    }
    //    else if (!expr.test(Altemail) && Altemail != "") {
    //        lblAltEmail.innerHTML = "Please enter valid email address.";
    //        //result = "error";
    //        $("#create").prop("disabled", true);
    //    }
    //    else {
    //        lblAltEmail.innerHTML = "";
    //        ValidateButton();
    //    }
    //}

    //function validatePwd() {
    //    //debugger;
    //    var password = document.getElementById("txtPassword").value;
    //    var confirmPassword = document.getElementById("txtConfirmPassword").value;
    //    var lblAltPwd = document.getElementById("lblAltPwd");
    //    lblAltPwd.innerHTML = "";
    //    if (password != confirmPassword) {
    //        lblAltPwd.innerHTML = "Password does not match";
    //        //result = "error";
    //        $("#create").prop("disabled", true);
    //    }
    //    else {
    //        lblAltPwd.innerHTML = "";
    //       ValidateButton();
    //    }
    //}


    







  
    //function ValidateButton() {
    //    var txtLastDt = $("#txtLastDt").val();
    //     var txtNextDt = $("#txtNextDt").val();
    //    var Name = $("#txtName").val();
    //    var Work = $("#txtwork").val();
    //    var Mobile = $("#txtMobId").val();
    //    var Email = $("#txtEmail").val();
    //    var CustomerUserName = $("#CustomerUserName").val();
    //    var Password = $("#txtPassword").val();
    //    var ConfirmPassword = $("#txtConfirmPassword").val();

    //    var lblName = $("#lblName").text(); // val();
    //    var lblwork = $("#lblwork").text();
    //    var lblMob = $("#lblMob").text();
    //    var lblEmail = $("#lblEmail").text();
    //    var Status = "";
    //    var lblAltPwd = $("#lblAltPwd").text();
        
    //    if (Name.length > 0 && Work.length > 0 && Mobile.length > 0 && Email.length > 0 && CustomerUserName.length > 0 && Password.length > 0 && ConfirmPassword.length > 0
    //    && lblName == "" && lblwork == "" && lblMob == "" && lblEmail == "" && Status == "" && lblAltPwd == "" && txtLastDt!="" && txtNextDt!="") {
    //       $("#create").prop("disabled", false);
    //    }
    //    else {
    //          $("#create").prop("disabled", true);
    //    }

        
    //}

    //function validateSave() {
    //    //debugger;
    //    if (result == "error") {
    //        $("#create").prop("disabled", true);
    //    }
    //    else {
    //        $("#create").prop("disabled", false);
    //    }
    //}
    function ValidateButton() {
        //debugger;
        var txtLastDt = $("#txtLastDt").val();
        var txtNextDt = $("#txtNextDt").val();
        var Name = $("#txtName").val();
        var Work = $("#txtwork").val();
        var Mobile = $("#txtMobId").val();
        var Email = $("#txtEmail").val();
        var CustomerUserName = $("#CustomerUserName").val();
        var Password = $("#txtPassword").val();
        var ConfirmPassword = $("#txtConfirmPassword").val();

        var lblName = $("#lblName").text(); // val();
        var lblwork = $("#lblwork").text();
        var lblMob = $("#lblMob").text();
        var lblEmail = $("#lblEmail").text();
        var Status = $("#Status1").text();
        var lblAltPwd = $("#lblAltPwd").text();

        

        if (Name.length > 0 && Work.length > 0 && Mobile.length > 0 && Email.length > 0 && CustomerUserName.length > 0 && Password.length > 0 && ConfirmPassword.length > 0 
            && lblName == "" && lblwork == "" && lblMob == "" && lblEmail == "" && Status == "" && lblAltPwd == "" && txtLastDt != "" && txtNextDt != "") {
            $("#create").prop("disabled", false);
        }
        else {
            $("#create").prop("disabled", true);
        }


    }

    $(document).ready(function () {
    $("#create").prop("disabled", true);
    $("#txtName").keypress(function (event) {
        var inputValue = event.which;
        // allow letters and whitespaces only.
        if (inputValue != 38) {
            if (!(inputValue >= 65 && inputValue <= 123) && (inputValue != 32 && inputValue != 0)) {
                event.preventDefault();
                $("#lblName").html("Not Allowed").show().fadeOut("slow");
            }
        }
    });
    $("#txtwork").keypress(function (event) {
        var inputValue = event.which;
        // allow letters and whitespaces only.

        if (!(inputValue >= 65 && inputValue <= 123) && (inputValue != 32 && inputValue != 0)) {
            event.preventDefault();
            $("#lblwork").html("Not Allowed").show().fadeOut("slow");
        }

    });

    $("#EstimatedSale").keypress(function (e) {
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            $("#lblEstimatedSale").html("Money Only").show().fadeOut("slow");
            return false;
        }
    });
    $("#txtAltMobId").keypress(function (e) {
        //if the letter is not digit then display error and don't type anything
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            //display error message
            $("#lblAltMob").html("Numbers Only").show().fadeOut("slow");
            return false;
        }
    });
    $("#txtMobId").keypress(function (e) {
        //if the letter is not digit then display error and don't type anything
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            //display error message
            $("#lblMob").html("Numbers Only").show().fadeOut("slow");
            return false;
        }
    });

    $("#EstimatedSale").bind('copy paste cut', function (e) {
        e.preventDefault();
    });

    
    $("#txtwork").on('change', function () {
        ValidateButton();
    });
    $("#txtMobId").on('change', function () {
        ValidateButton();
    });
    $("#txtAltMobId").on('change', function () {
        ValidateButton();
    });
        $("#txtPassword").on('change', function () {
            $("#txtConfirmPassword").val("");
        ValidateButton();
    });
    $("#txtConfirmPassword").on('change', function () {
        ValidateButton();
    });
    $("#EstimatedSale").on('change', function () {
        ValidateButton();
    });
    $("#txtEmail").on('change', function () {
        ValidateButton();
    });
    $("#txtAltEmail").on('change', function () {
        ValidateButton();
    });
    $("#txtLastDt").on('change', function () {
        ValidateButton();
    });
    $("#txtNextDt").on('change', function () {
        ValidateButton();
    });
    $("#LeadStatus").on('change', function () {
        ValidateButton();
    });
    $("#LeadSource").on('change', function () {
        ValidateButton();
    });
    $("#Comments").on('change', function () {
        ValidateButton();
    });

    $("#txtLastDt,#txtNextDt").keypress(function (e) {
        return false;
    });
    $("#txtLastDt,#txtNextDt").keydown(function (e) {
        return false;
    });
    $(function () {

        $('#txtLastDt').focus(function () {
            $('#txtLastDt').datepicker('show');
        });
        $('#txtNextDt').focus(function () {
            $('#txtNextDt').datepicker('show');
        });


        $("#txtLastDt").datepicker({
            showOn: "button",
            buttonImage: "/Asset/images/calendar-512.png",
            buttonImageOnly: true,
            buttonText: "Select date",
            dateFormat: "dd/mm/yy",
            changeMonth: true,
            changeYear: true,
            beforeShow: function (textbox, instance) {
                instance.dpDiv.css({
                    marginLeft: textbox.offsetWidth + (-200) + 'px'
                    //Here -176 is the width of my datepicker div, you can change according to your need.
                });
            }
        });

        $("#txtNextDt").datepicker({
            showOn: "button",
            buttonImage: "/Asset/images/calendar-512.png",
            buttonImageOnly: true,
            buttonText: "Select date",
            dateFormat:"dd/mm/yy",
            changeMonth: true,
            changeYear: true,
            beforeShow: function (textbox, instance) {
                instance.dpDiv.css({
                    marginLeft: textbox.offsetWidth + (-200) + 'px'
                    //Here -176 is the width of my datepicker div, you can change according to your need.
                });
            }
        });
    });
    
    

    


});

</script>





