@Styles.Render("~/Content/css/jqGrid")
@Scripts.Render("~/bundles/Scripts/jqGrid")

<script>
    //$.jgrid.defaults.width =1000;
    $.jgrid.defaults.responsive = true;
    $.jgrid.defaults.styleUI = 'Bootstrap4';
    $.jgrid.defaults.iconSet = "Octicons";
</script>
<style>
    #jqGridPager_center {
        visibility: hidden;
    }
</style>
<style>
    .wrapColumnText {
        white-space: normal !important;
        height: auto;
        vertical-align: text-top;
    }
</style>
<div>
    <table id="jqGrid"></table>
    <div id="jqGridPager"></div>
</div>
<script>
    function LoadTable(Instance) {
        // altrows are set with table striped class for Boostrap
        $.jgrid.styleUI.Bootstrap.base.rowTable = "table table-bordered";
        var lastSelection;
        var editParameters = {
            keys: true,
            //successfunc: editSuccessful,
            errorfunc: false,
            restoreAfterError: false,
            extraparam: {
                valor: 'texto', any: '20164',
                clave1: function () {
                    var sel_id = $("#grid").jqGrid('getGridParam', 'selrow');
                    var value = $("#grid").jqGrid('getCell', sel_id, 'pas1');
                    return value;
                },
                obra: function () {
                    var sel_id = $("#grid").jqGrid('getGridParam', 'selrow');
                    var value = $("#grid").jqGrid('getCell', sel_id, 'obra');
                    return value;
                },
                empresa: function () {
                    var sel_id = $("#grid").jqGrid('getGridParam', 'selrow');
                    var value = $("#grid").jqGrid('getCell', sel_id, 'empresa');
                    return value;
                }
            }
        };
        var grid = $("#grid");
        var cancelEditing = function (myGrid) {
            var lrid;
            if (typeof lastSelection !== "undefined") {
                // cancel editing of the previous selected row if it was in editing state.
                // jqGrid hold intern savedRow array inside of jqGrid object,
                // so it is safe to call restoreRow method with any id parameter
                // if jqGrid not in editing state
                myGrid.jqGrid('restoreRow', lastSelection);


                // now we need to restore the icons in the formatter:"actions"
                lrid = $.jgrid.jqID(lastSelection);
                $("tr#" + lrid + " div.ui-inline-edit, " + "tr#" + lrid + " div.ui-inline-del").show();
                $("tr#" + lrid + " div.ui-inline-save, " + "tr#" + lrid + " div.ui-inline-cancel").hide();
                $("div.ui-inline-close").show();
            }
        };
        var getColumnIndexByName = function (grid, columnName) {
            var cm = grid.jqGrid('getGridParam', 'colModel'), i, l = cm.length;
            for (i = 0; i < l; i++) {
                if (cm[i].name === columnName) {
                    return i; // return the index
                }
            }
            return -1;
        }
        var DateInput = function (element, options) {
            $(element).on('keypress', function (e) {
                //if (e.which === 8 && $.inArray(e.target.tagName, inputTags) === -1)
                e.preventDefault();
            })
            $(element).datepicker({
                dateFormat: "dd/mm/yy",
                autoSize: true,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false
            });
        };
        var initDateEdit = function (elem, options) {
            // we need get the value before changing the type
            var orgValue = $(elem).val(),
                cm = $(this).jqGrid("getColProp", options.name);

            $(elem).attr("type", "date");
            if ((Modernizr && !Modernizr.inputtypes.date) || $(elem).prop("type") !== "date") {
                // if type="date" is not supported call jQuery UI datepicker
                $(elem).datepicker({
                    dateFormat: "dd/mm/yy",
                    autoSize: true,
                    changeYear: true,
                    changeMonth: true,
                    showButtonPanel: true,
                    showWeek: true
                });
            } else {
                // convert date to ISO
                $(elem).val($.jgrid.parseDate.call(this, cm.formatoptions.newformat, orgValue, "Y-m-d"));
            }
        };
        var rowEdit = function (row) {
            //debugger;
            if (row == 0)
                return false;
        }
        var PhaseID = @TempData["PhaseID"];
        $("#jqGrid").jqGrid({
            url: "@Url.Action("GetData","Resource")?Phase_ID="+PhaseID,//,new { Phase_ID= PhaseID})",
            datatype: "json",
            editurl: "@Url.Action("UpdateResource","Resource")",
            colModel: [
                {
                    label: 'Id', name: 'Id', index: 'Id', width: 70,
                    sortable: false, align: 'center', editable: true, hidden: true

                },
                {
                    label: 'Building Block', name: 'BuldingBlockID', index: 'BuldingBlockID', width: 70,classes: 'wrapColumnText' ,
                    sortable: false, align: 'Left', editable: true, edittype: 'custom',
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetBlock()

                    }
                },
                {
                    label: 'Phase', name: 'PhaseId', index: 'PhaseId', width: 70,
                    sortable: false, align: 'Left', editable: true, edittype: 'custom',
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetPhaseDropDown()

                    }
                },
                { label: 'Activity / Task ', name: 'Task', width: 150, sortable: false, sorttype: 'integer', editable: true,classes: 'wrapColumnText' },
                { label: 'Sequence ', name: 'SequenceNum', width: 50, sortable: false, sorttype: 'integer', editable: true ,hidden: true},
                {
                    label: 'Role', name: 'RoleID', index: 'RoleID', width: 70, sortable: false, align: 'left', editable: true,
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetRoleDropDown(),
                        dataEvents: [
                    {
                        type: 'change',
                        fn: function (e) {
                           UpdateUserByRole($("#RoleID").val());
                        }
                    }]
                    },

                },

                {
                    label: 'Select Task', name: 'ActivityID', index: 'ActivityID', width: 70, sortable: false, align: 'left', editable: true, hidden: true,
                    cellEdit: true, edittype: 'select', formatter: 'select',//Add Only
                    editoptions: {
                    dataUrl: "@Url.Action("MasterAdd","Resource")?Phase_ID="+PhaseID, 
                    buildSelect: buildSelectFromJson
                    }
                    //editoptions: {
                    //    value: GetMasterAddAssessment()
                    //}
                    //cellbeginedit: rowEdit
                },
                 {
                    label: 'Status', name: 'StatusId', index: 'StatusId', width: 70,  align: 'Left', editable: true,
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetStatusDropDown()
                    },
                },

                {
                    label: 'Owner of Task', name: 'UserID', index: 'UserID', width: 70, sortable: false, align: 'center', editable: true,
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetUserDropDown()
                    }
                },




            ],
            loadonce: false,
            altRows: true,
            //rownumbers : true,
            //multiselect : true,
            width: 950,
            colMenu: false,
            menubar: false,
            viewrecords: true,
            hoverrows: true,
            // height: 'auto',
            height: 400,
            rowNum: 1000,
            caption: '',
            sortable: false,
            grouping: false,
            pager: "#jqGridPager",
            rownumbers: true,
            reload: true,
            //sortname: 'SequenceNum',
            //sortorder: 'desc',
            afterSubmit: function () {
                //debugger;
                //location.reload(true);
                //$(this).jqGrid("setGridParam", { datatype: 'json' });
                //return [true];
            },
            loadComplete: function () {

            }
            // set table stripped class in table style in bootsrap
        });

        $('#jqGrid').navGrid('#jqGridPager',
            // the buttons to appear on the toolbar of the grid
            { edit: true, add: true, del: false, search: false, refresh: true, view: false, position: "left", cloneToTop: false },
            // options for the Edit Dialog
            {
                editCaption: "The Edit Dialog",
                recreateForm: true,
                checkOnUpdate: true,
                checkOnSubmit: true,
                closeAfterEdit: true,
                beforeInitData: function (form) {
                    var id = jQuery("#jqGrid").jqGrid('getGridParam', 'selrow');
                    var celValue = jQuery("#jqGrid").jqGrid('getCell', id, 'StatusId');
                    if (celValue == 3 || celValue == 1) {
                        $.alert({
                            title: 'Alert !',
                            content: 'You\'r  not allowed to edit task Which are already Completed..! ',// <br> with some <strong>HTML</strong> <em>contents</em>',
                            icon: 'fa fa-rocket',
                            animation: 'scale',
                            closeAnimation: 'scale',
                            buttons: {
                                okay: {
                                    text: 'Okay',
                                    btnClass: 'btn-wide mb-2 mr-2 btn btn-primary form-control'
                                    //action: function (event, ui) {
                                    //    $(this).remove();
                                    //    LoadTable(IDInstance);
                                    //    $('#jqGrid').trigger('reloadGrid');
                                    //}
                                }
                            }

                        });

                        return false;
                    }

                    //$("#jqGrid").jqGrid('getCell', id, 'StatusId');
                    //var Status=$("#" + id + "_StatusId").val();
                    //alert(id);
                },
                beforeShowForm: function (form) {
                    //$("#PhaseId").attr("disabled", "disabled");

                    $("#editmodjqGrid").addClass("centered");
                    $(".navButton").hide();
                    $("#tr_PhaseId").hide();
                    $("#tr_SequenceNum").hide();
                    $("#tr_StatusId").hide();
                    $("#tr_BuldingBlockID").hide();

                    $("#Task").attr("disabled", "disabled");
                     $("#RoleID").attr("disabled", "disabled");
                    //$("#RoleID").attr("disabled", "disabled");
                    UpdateUserByRole($("#RoleID").val());
                    //debugger;
                    //needDisable=true;
                },
                // afterShowForm: populateUser,
                errorTextFormat: function (data) {
                    alert("in" + data.responseText);
                    return 'Error: ' + data.responseText
                }
            },
            // options for the Add Dialog
            {
                url: "@Url.Action("AddResource","Resource")",
                closeAfterAdd: true,
                recreateForm: true,
                beforeShowForm: function (form) {
                    $("#editmodjqGrid").addClass("centered");
                    $("#tr_PhaseId").hide();
                    $("#tr_SequenceNum").hide();
                    $("#tr_StatusId").hide();
                    $("#tr_Task").hide();
                    $("#tr_RoleID").hide();
                    $("#tr_UserID").hide();
                    $("#tr_BuldingBlockID").hide();
                    //debugger;
                    //alert("In");
                    $("#tr_ActivityID").show();

                    //debugger;
                    //var ids = jQuery("#jqGrid").jqGrid('getDataIDs');
                    //for (var i = 0; i < ids.length; i++)
                    //    {
                    //        var data = $('#jqGrid').jqGrid('getCell', ids[i], 'Task')

                    //        if (data != "") {
                    //            $("#ActivityID option[data="+data+"]").remove();
                    //        }
                    //    }

                },
                reloadAfterSubmit: true,
                //onclickSubmit: function (options, postdata) {
                //    //var Id=postdata.ActivityID
                //    //$("#ActivityID option[value="+Id+"]").remove();

                //    //$('#jqGrid').trigger('reloadGrid');
                ////    //debugger;
                ////    //if (Data.responseText == true) {
                ////    //    $.alert({
                ////    //        title: 'Alert !',
                ////    //        content: 'Resource Added Successfully..!',// <br> with some <strong>HTML</strong> <em>contents</em>',
                ////    //        icon: 'fa fa-rocket',
                ////    //        animation: 'scale',
                ////    //        closeAnimation: 'scale',
                ////    //        buttons: {
                ////    //            okay: {
                ////    //                text: 'Okay',
                ////    //                btnClass: 'btn-wide mb-2 mr-2 btn btn-primary form-control'
                ////    //                //action: function (event, ui) {
                ////    //                //    $(this).remove();
                ////    //                //    location.reload();
                ////    //                //}
                ////    //            }
                ////    //        }
                ////    //    });
                ////    //}

                //},
                errorTextFormat: function (data) {
                    return 'Error: ' + data.responseText
                }
            },
            // options for the Delete Dailog
            {
                onclickSubmit: function (options, postdata) {
                    var rowid = $('#jqGrid').jqGrid('getGridParam', 'selrow');
                    var ID = $('#jqGrid').jqGrid('getCell', rowid, 'Id')
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("DeleteResource","Resource")',
                        data: '{ID: ' + JSON.stringify(ID)+'}',
                        dataType: "json",
                        async: false,
                        contentType: "application/json; charset=utf-8",
                        success: function (Data) {

                            if (Data) {

                                $.alert({
                                    title: 'Delete !',
                                    content: 'Deleted Sussfully..!',// <br> with some <strong>HTML</strong> <em>contents</em>',
                                    icon: 'fa fa-trfa-trash-o',
                                    animation: 'scale',
                                    closeAnimation: 'scale',
                                    buttons: {
                                        okay: {
                                            text: 'Okay',
                                            btnClass: 'btn-wide mb-2 mr-2 btn btn-primary form-control',
                                            action: function (event, ui) {
                                                $(this).remove();
                                                //LoadTable(IDInstance);
                                                $('#jqGrid').trigger('reloadGrid');
                                            }
                                        }
                                    }

                                });


                                //debugger;
                                //alert("");
                            }
                            //for (var i = 0; i < Data.length; i++) {
                            //    var obj = {};
                            //    var Name = Data[i].Name;
                            //    var key = "" + Data[i].UserId;
                            //    Parameters[key] = Name;
                            //}
                        },
                        error: function (data) {
                            alert("fail");
                        }
                    });
                    //debugger;
            //        alert('in onclickSubmit: postdata=' + postdata);
            //        //return { myData: 'Hello'};
            //        $('#del_gridTemp').click(function () {
            //    alert('in click selarrrow=[' + $grid.jqGrid('getGridParam', 'selarrrow').join(', ') + ']');
            //});
                },
                errorTextFormat: function (data) {
                    return 'Error: ' + data.responseText
                }
            },
            // search options - define multiple search
            {
                multipleSearch: true,
                showQuery: false
            }
        );
    }
    var buildSelectFromJson = function (response) {
        var html = '<select>', d = JSON.parse(response), length = d.length, i = 0, item;
        for (; i < length; i++) {
            item = d[i];
            html += '<option value=' + item.ActivityID + '>' + item.Task + '</option>';
        }
        html += '</select>';
        return html;
    };
    function GetStatusDropDown() {
        var Parameters = {};
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetStatus","ProjectMonitor")',
            //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
            dataType: "json",
            async: false,
            contentType: "application/json; charset=utf-8",
            success: function (Data) {
                //debugger;
                for (var i = 0; i < Data.length; i++) {
                    //var obj = {};
                    var StatusName = Data[i].StatusName;
                    var key = "" + Data[i].Id;
                    Parameters[key] = StatusName;
                }
            },
            error: function (data) {
                alert("GetStatus fail");
            }
        });
        return Parameters;
    }
    function GetPhaseDropDown() {
        var Parameters = {};
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetPhase","ProjectMonitor")',
            data: '{RoleID: ' + JSON.stringify(0)+ '}',
            //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
            dataType: "json",
            async: false,
            contentType: "application/json; charset=utf-8",
            success: function (Data) {
                //debugger;
                //$.each(Data, function (data1, value) {

                //    $("#PhaseId").append($("<option></option>").val(value.Id).html(value.PhaseName));
                //});
                for (var i = 0; i < Data.length; i++) {
                    var obj = {};
                    var PhaseName = Data[i].PhaseName;
                    var key = "" + Data[i].Id;
                    Parameters[key] = PhaseName;
                }
            },
            error: function (res) {
                alert("fail");
            }
        });
        return Parameters;
    }
    function GetRoleDropDown() {
        var Parameters = {};
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetRole","ProjectMonitor")',
            //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
            dataType: "json",
            async: false,
            contentType: "application/json; charset=utf-8",
            success: function (Data) {
                for (var i = 0; i < Data.length; i++) {
                    var obj = {};
                    var RoleName = Data[i].RoleName;
                    var key = "" + Data[i].RoleId;
                    Parameters[key] = RoleName;
                }
            },
            error: function (data) {
                alert("fail");
            }
        });
        return Parameters;

    }
     function GetBlock() {
    var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetBlock","Resource")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
		async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
				for (var i = 0; i < Data.length; i++) {
                var obj = {};
                var Name = Data[i].Block_Name;
                var key = "" + Data[i].block_ID;
                Parameters[key] = Name;
            }
        },
        error: function (data) {
            alert("GetAllUser fail");
        }
    });
	return Parameters;
    }


    function UpdateUserByRole(RoleID) {
         //$("#RoleID").attr("disabled", "disabled");
         $("#UserID")
            .html("<option value=''>Loading User...</option>")
            .attr("disabled", "disabled");

        $.ajax({
            url: '@Url.Action("GetUser","ProjectMonitor")'+"?RoleID="+RoleID,
           // data: '{RoleID: ' + JSON.stringify(RoleID)+'}',
			dataType: "json",
			contentType: "application/json; charset=utf-8",
            success: function (res) {
                //debugger;
                $("#UserID")
                    .removeAttr("disabled");
                 $('#UserID').empty()
                $.each(res, function (data, value) {
                    var d = "00000000-0000-0000-0000-000000000000"
                    if (value.UserId!=d) {
                         $("#UserID").append($("<option></option>").val(value.UserId).html(value.Name));
                    }

                })
            }
                    //.html(citiesHtml);

        });

    }
    $("#RoleID").change(function () {
       // debugger;
        var RoleID = $("#RoleID").val();
        UpdateUserByRole(RoleID)
    });
    function GetUserDropDown() {
	var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetAllUser","ProjectMonitor")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
		async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
            //debugger;
				for (var i = 0; i < Data.length; i++) {
                var obj = {};
                    var Name = Data[i].Name;
                var key = ""+Data[i].UserId;
                Parameters[key] = Name;
            }
        },
        error: function (data) {
            alert("fail");
        }
    });
	return Parameters;
    }
    @*function GetMasterAddAssessment() {
	var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("MasterAddAssessment","Resource")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
        async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
            //debugger;
				for (var i = 0; i < Data.length; i++) {
                var obj = {};
                    var Name = Data[i].Task;
                var key = ""+Data[i].ActivityID;
                Parameters[key] = Name;
            }
        },
        error: function (data) {
            alert("fail");
        }
    });
	return Parameters;
    }*@

    function DeletePost() {
        alert("IN");
		//Here you need to define ajax call for insert records to server
		console.log(params);
	}
</script>
