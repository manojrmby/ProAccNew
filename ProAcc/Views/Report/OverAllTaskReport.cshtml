
@{
    ViewBag.Title = "DetailedTaskReport";
    Layout = "~/Views/shared/_Layout.cshtml";
}

@Styles.Render("~/Content/css/jqGrid")
@Scripts.Render("~/bundles/Scripts/jqGrid")

@*<script type="text/javascript" language="javascript" src="//cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/pdfmake.min.js"></script>
    <script type="text/javascript" language="javascript" src="//cdn.rawgit.com/bpampuch/pdfmake/0.1.26/build/vfs_fonts.js"></script>*@



<script src="~/Asset/Jquery/jqGrid/plugins/pdfmake.min.js"></script>
<script src="~/Asset/Jquery/jqGrid/plugins/vfs_fonts.js"></script>
<a class="card-title">Detailed Task Report</a>
<br />
<script>
    //$.jgrid.defaults.width =1000;
    $.jgrid.defaults.responsive = true;
    $.jgrid.defaults.styleUI = 'Bootstrap4';
    $.jgrid.defaults.iconSet = "Octicons";
</script>
<style>
    .ui-jqgrid {
        font-size: 0.8rem
    }

    th.ui-th-column div {
        white-space: normal !important;
        height: auto !important;
        padding: 2px;
        text-align: center;
    }

    .ui-jqgrid .ui-jqgrid-view input, .ui-jqgrid .ui-jqgrid-view select, .ui-jqgrid .ui-jqgrid-view textarea, .ui-jqgrid .ui-jqgrid-view button {
        font-size: 11px !important;
    }

    .ui-jqgrid .ui-jqgrid-bdiv {
        overflow-y: scroll
    }

    #jqGridPager_center {
        visibility: hidden;
    }

    .fixed-sidebar .app-sidebar {
        height: 100% !important;
    }

    .app-main {
        flex: 1;
        display: flex;
        z-index: 8;
        position: relative;
        min-width: 100% !important;
    }

    .app-theme-white.app-container {
        background: #ffffff;
    }

    .app-container {
        min-height: 100%;
    }

    .wrapColumnText {
        white-space: normal !important;
        height: auto;
        vertical-align: text-top;
    }

    .fit_Data {
        width: fit-content;
    }

    .MyClass123:before {
        content: url("https://img.icons8.com/officel/80/000000/export-pdf.png");
    }
</style>

<div class="row instanceRow">
    <input type="hidden" id="hdnSessionProject_Name" value="@Session["Project_Name"]" />
    <input type="hidden" id="hdnSessionInstance_Name" value="@Session["Instance_Name"]" />
    <div class="col-lg-12 card" style="margin-bottom:20px !important;">
        <div class="row">
            @if (User.IsInRole("Consultant") || User.IsInRole("Admin"))
            {
                <div class="col-md-4">
                    <div class="position-relative form-group">
                        <label for="exampleEmail" class="">Customer Name</label>
                        @Html.DropDownList("Customer", (IEnumerable<SelectListItem>)ViewBag.Customer, "-Select-", new { id = "IDCustomer", @class = "form-control" })
                        @*@Html.DropDownList("Project", (IEnumerable<SelectListItem>), "- SELECT-", new { id = "IDProject", @class = "form-control" })*@
                    </div>
                </div>
            }
            <div class="col-md-4">
                <label class="">Project Name</label>
                @if (User.IsInRole("Customer") || User.IsInRole("Project Manager"))
                {
                    @Html.DropDownList("Project", (IEnumerable<SelectListItem>)ViewBag.Project, "-Select-", new { id = "IDProject", @class = "form-control" })
                }
                else
                {
                    @Html.DropDownList("Project", new SelectList(Enumerable.Empty<SelectListItem>(), "IDProject", "ProjectName"),
                           "Select a Customer", new { id = "IDProject", @class = "form-control" })
                }
            </div>
            <div class="col-md-2">
                <label for="exampleEmail" class="">Instance Name</label>
                @Html.DropDownList("Instance", new SelectList(Enumerable.Empty<SelectListItem>(), "IDInstance", "InstanceName"),
                "-Select-", new { id = "IDInstance", @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label for="exampleEmail" class="">.</label>
                <button class="btn-wide mb-2 mr-2 btn btn-primary form-control" id="SubmitInstance">
                    Select Instance
                </button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-6">
        <a class="card-title" style="float: left;">Project Name :@Session["Project_Name"]</a>
    </div>
    <div class="col-6">
        <a class="card-title " style="float: right;">Instance Name : @Session["Instance_Name"]</a>
    </div>
</div>
<div style="margin-left:20px;margin-top:20px">
    <table id="jqGrid"></table>
    <div id="jqGridPager"></div>
    @*<i class="fa fa-file-pdf-o" id="export"></i>*@
    @*<img src="https://img.icons8.com/officel/80/000000/export-pdf.png" />*@
    <button class="MyClass123" id="export" style="display:none;"></button>
</div>
<input type="hidden" id="hdnSessionProject_ID" value="@Session["Project_ID"]" />
<input type="hidden" id="hdnSessionInstance_ID" value="@Session["Instance_ID"]" />

<script>
    $(document).ready(function () {
            $("#IDInstance").prop("disabled", true);
        $('#SubmitInstance').prop("disabled", true);

        var Instance=$("#hdnSessionInstance_ID").val();
        if (Instance != "") {
            var IDInstance = $("#hdnSessionInstance_ID").val();
            $.ajax({
                url: '@Url.Action("SubmitInstance", "Home")',
                type: "POST",
                data: { 'IDInstance': IDInstance },
                success: function (result) {
                    Notiflix.Notify.Success('New Live Instance updated !', { cssAnimationStyle: 'zoom', cssAnimationDuration: 500, });
                     LoadTable(IDInstance);
                    $('#jqGrid').trigger('reloadGrid');
                }
            });
        }
    });
     $('#IDCustomer').change(function () {
            $("#IDInstance").prop("disabled", false);
            var id = $(this).val();
             var select = $("#IDProject");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
            $.ajax({
                type: "POST",
                url: '@Url.Action("LoadProject","Home")',
                data: { 'CustomerId' : id},
                success: function (data) {
                    var select = $("#IDProject");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
                    $.each(data, function (index, itemData) {
                        select.append($('<option/>', {
                            value: itemData.Value,
                            text: itemData.Text
                        }));
                    });
                    $("#IDProject").prop("disabled", false);
                    $("#IDInstance").prop("disabled", true);
                    $('#SubmitInstance').prop("disabled", true);
                },
                error: function (a) {
                    //debugger;
                   // alert(a);
                }
            });
        });
    $('#IDProject').change(function () {

            var id = $(this).val();
			$('#SubmitInstance').prop("disabled", true);
             var select = $("#IDInstance");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
            $.ajax({
                type: "POST",
                url: '@Url.Action("LoadInstanceforResource","Home")',
                data: { 'ProjectId' : id},
                success: function (data) {
                    var select = $("#IDInstance");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
                    if (data.length > 0) {
                        $.each(data, function (index, itemData) {
                            select.append($('<option/>', {
                                value: itemData.Value,
                                text: itemData.Text
                            }));
                        });
                        $("#IDInstance").prop("disabled", false);
                    }
                    else {
                        $("#IDInstance").prop("disabled", true);
						$('#SubmitInstance').prop("disabled", true);
                    }
                },
                error: function (a) {
                   // alert(a);
                }
            });
            });
    $('#IDInstance').change(function () {
                var id = $(this).val();
                if (id == ""||id =="0") {
                     $('#SubmitInstance').prop("disabled", true);
                } else {
					$('#SubmitInstance').prop("disabled", false);
                }
            });
    $('#SubmitInstance').click(function () {
        var IDInstance = $("#IDInstance").val();
        $.ajax({
            //url: '<%: Url.Action("Upload")%>?Cust_ID=' + Cust_ID + '&IDProject=' + IDProject+'&InstanceID='+InstanceID,
            url: '@Url.Action("SubmitInstance", "Home")',
            type: "POST",
            data: { 'IDInstance': IDInstance },
            success: function (result) {
                Notiflix.Notify.Success('New Live Instance updated !', {cssAnimationStyle:'zoom', cssAnimationDuration:500,});
                LoadTable(IDInstance);
                $('#jqGrid').trigger('reloadGrid');
                $('#export').show();


                //$.alert({
                //    title: 'Alert !',
                //    content: 'New Live Instance updated',// <br> with some <strong>HTML</strong> <em>contents</em>',
                //    icon: 'fa fa-rocket',
                //    animation: 'scale',
                //    closeAnimation: 'scale',
                //    buttons: {
                //        okay: {
                //            text: 'Okay',
                //            btnClass: 'btn-wide mb-2 mr-2 btn btn-primary form-control',
                //            action: function (event, ui) {
                //                $(this).remove();
                //                LoadTable(IDInstance);
                //                $('#jqGrid').trigger('reloadGrid');
                //            }
                //        }
                //    }

                //});


            }
        });
    });
</script>

<script>
    //document.body.style.zoom = "80%";
    $(document).ready(function () {
        //LoadTable(1);
    });
    $(window).on("resize", function () {
  var $grid = $("#jqGrid"),
    newWidth = $grid.closest(".ui-jqgrid").parent().width();
  $grid.jqGrid("setGridWidth", newWidth, true);
});
    function LoadTable(Instance) {
        $.jgrid.styleUI.Bootstrap.base.rowTable = "table table-bordered";

        var Planed_StartDate = function (element, options) {
            var ID = options.rowId;
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            $(element).datepicker({
                duration: "slow",
               // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                onClose: function (selectedDate) {
                    $("#" + ID + "_Planed__En_Date").datepicker("option", "minDate", selectedDate);
                    $("#"+ID+"_Actual_St_Date").datepicker("option", "minDate", selectedDate);
                },
            }).datepicker("setDate", new Date());
             //}).datepicker();
        };
        var Planed_EndDate = function (element, options) {
           var ID = options.rowId;
            //var ST_Date=$('#').val();
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            $(element).datepicker({
                duration: "slow",
               // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                onClose: function (selectedDate) {
                    $("#" + ID + "_Planed__St_Date").datepicker("option", "maxDate", selectedDate);

                    $("#" + ID + "_Actual_En_Date").datepicker("option", "maxDate", selectedDate);
                }
            }).datepicker("setDate", new Date());
            // }).datepicker();
        };


        var Actual_St_Date = function (element, options) {
            var ID = options.rowId;
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            $(element).datepicker({
                duration: "slow",
               // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                 dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                onClose: function (selectedDate) {
                    $("#"+ID+"_Actual_En_Date").datepicker("option", "minDate", selectedDate);
                },
            }).datepicker("setDate", new Date());
            // }).datepicker();
        };
        var Actual_En_Date = function (element, options) {
           var ID = options.rowId;
            //var ST_Date=$('#').val();
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            $(element).datepicker({
                duration: "slow",
               // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                onClose: function (selectedDate) {
                    $("#" + ID + "_Actual_St_Date").datepicker("option", "maxDate", selectedDate);

                }
            }).datepicker("setDate", new Date());
            // }).datepicker();
        };

        $("#jqGrid").jqGrid({
            url: "@Url.Action("GetDataReport", "Report")",
            datatype: "json",

            colModel: [
                {
                    label: 'Id', name: 'Id', index: 'Id', width: 70,
                    align: 'center', editable: true, hidden: true,
                },
                {
                    label: 'Building Block', name: 'BuldingBlockID', index: 'BuldingBlockID', width: 100, editable: false, classes: 'wrapColumnText',
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetBlock()
                    }
                },
                {
                    label: 'Phase', name: 'PhaseId', index: 'PhaseId', width: 70,
                    align: 'center', editable: true, edittype: 'custom',
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editrules: {
                        required: true,
                        edithidden: true
                    },
                    editoptions: {
                        value: GetPhaseDropDown()
                    }
                },
                {
                    label: 'Activity / Task ', name: 'Task', width: 150, editable: true, hidden: true, classes: 'wrapColumnText',
                    editrules: {
                        required: true,
                        edithidden: true
                    }

                },
                {
                    label: 'Activity / Task ', name: 'Task', width: 150, editable: false, classes: 'wrapColumnText',


                },
                {
                    label: 'Application Area', name: 'ApplicationAreaID', index: 'ApplicationAreaID', width: 100, editable: false, classes: 'wrapColumnText',
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetApplicationAreaDropDown()
                    }

                },
                {
                    label: 'Sequence ', name: 'SequenceNum', width: 50, editable: true, hidden: true,
                    editrules: {
                        required: true,
                        edithidden: true
                    },
                    editoptions: {
                        size: 15, maxlengh: 10,
                        dataInit: function (element) {
                            $(element).keypress(function (e) {
                                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                                    return false;
                                }
                            });
                        }
                    }

                },
                {
                    label: 'Task Other Env. (Y/N)',
                    name: 'Task_Other_Environment', width: 55, editable: true, hidden: true,
                    editoptions: { value: "True:False" }

                },
                {
                    label: 'Dependency (Y/N)',
                    name: 'Dependency', width: 72, editable: true, hidden: true,
                    //edittype: 'checkbox',
                    editoptions: { value: "Yes:No" }
                    //, formatter: "checkbox",
                },
                { label: 'Pending With ', name: 'Pending', width: 100, editable: true, hidden: true },
                {
                    label: 'Delay', name: 'Delay_occurred_Report', width: 58, align: 'center', editable: true
                    //edittype: 'select',
                    //editoptions: {
                    //    //defaultValue: 'N',
                    //    //value: Delay_Data()
                    //},
                    //formatter: function (cellvalue, options, rowObject, action) {
                    //    if (cellvalue) {
                    //        return "Yes";
                    //    } else {
                    //        return "No";
                    //    }
                    //}

                    //edittype: 'checkbox'
                    //editoptions: {
                    //    value: function (a) { debugger; }
                    //}
                    // formatter: "checkbox",
                    // editoptions: { value: "Yes:True:No" }

                    //editoptions: {
                    //    size: 15, maxlengh: 10,
                    //    dataInit: function (element) {
                    //        debugger;
                    //        $(element).keypress(function (e) {
                    //            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    //                return false;
                    //            }
                    //        });
                    //    }
                    //}
                },
                {
                    label: 'Owner', name: 'UserID', index: 'UserID', width: 75, align: 'center', editable: false,
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        //defaultValue: 'N',
                        value: GetUserDropDown()
                    }

                },
                {
                    label: 'Status', name: 'StatusId', index: 'StatusId', width: 100,  align: 'center', editable: true,
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetStatusDropDown(),defaultValue:"0",
                    },
                    @*editoptions: {
                        dataUrl: '@Url.Action("GetStatus","ProjectMonitor")',
                        buildSelect: function (data) {

                            debugger;
                            alert('in');
                            var field_id = this.id; // "myDropDown"
                            setTimeout(function () {
                                if (needDisable) {
                                    $('#tr_' + field_id).attr('disabled', 'disabled');
                                } else {
                                    $('#tr_' + field_id).removeAttr('disabled');
                                }
                            }, 100);
                            return data;
                        }
                    },*@

                },
                {
                    label: 'Est.(hrs)', name: 'EST_hours', width: 55, align: 'right',
                    //maxlength: 4,
                    //formatter: "number",
                    editable: true,
                    //formatoptions: { masks: 'LongTime', newformat: 'ShortTime' },
                    editrules: { },
                    editoptions: {
                       // maxlength:4,
                        dataInit: function (element) {
                            $(element).keyup(function(event) {

                                  this.value = this.value
                                  .replace(/[^\d:]/g, '')             // numbers and decimals only
                                  .replace(/(^[\d]{2})[\d]/g, '$1')   // not more than 2 digits at the beginning
                                  .replace(/(\::*)\:/g, '$1')         // decimal can't exist more than once
                                  .replace(/(\:[\d]{2})./g, '$1');    // not more than 4 digits after decimal


                            });

                        }
                    }
                },
                {
                    label: 'Actual (hrs)', name: 'Actual_St_hours', align: 'right',
                    //formatter: "number",
                    width: 55, editable: true,
                    editoptions: {

                        //dataInit: function (element) {
                        //    $(element).keypress(function (e) {
                        //        //alert(e);
                        //        if (e.which == 46) {

                        //        }
                        //        else if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                        //            return false;
                        //        }
                        //    });
                        //}
                         dataInit: function (element) {
                            $(element).keyup(function(event) {

                                  this.value = this.value
                                  .replace(/[^\d:]/g, '')             // numbers and decimals only
                                  .replace(/(^[\d]{2})[\d]/g, '$1')   // not more than 2 digits at the beginning
                                  .replace(/(\::*)\:/g, '$1')         // decimal can't exist more than once
                                  .replace(/(\:[\d]{2})./g, '$1');    // not more than 4 digits after decimal


                            });

                        }
                    }
                },
                {
                    label: 'Planned Start Date', name: 'Planed__St_Date',
                    width: 75, align: "center",  formatter: "date", formatoptions: { altFormat: "dd-mm-yy", newformat: "d/m/Y" }, editable: true,
                    editoptions: { dataInit: Planed_StartDate, classes: 'DateClass' }
                },
                {
                    label: 'Actual Start Date', name: 'Actual_St_Date',
                    width: 75, align: "center",  formatter: "date", formatoptions: { altFormat: "dd-mm-yy", newformat: "d/m/Y" }, editable: true,
                    editoptions: { dataInit: Actual_St_Date }

                },
                {
                    label: 'Planned End Date', name: 'Planed__En_Date',
                    width: 75, align: "center",  formatter: "date", formatoptions: { newformat: "d/m/Y" }, editable: true
                    ,
                    editoptions: { dataInit: Planed_EndDate }
                },
                {
                    label: 'Actual End Date', name: 'Actual_En_Date',
                    width: 75, align: "center",  formatter: "date", formatoptions: { newformat: "d/m/Y" }, editable: true
                    ,
                    editoptions: { dataInit: Actual_En_Date }
                },
                {
                    label: 'Comments', name: 'Notes', edittype: "textarea",
                    wrap: "on"
                    //formatter: function (v) {
                    //     return '<div style="max-height:20px">' $.jgrid.htmlEncode(v) '</div>';
                    // }
                    ,editrules: { "edithidden": true }, "editable": true, "width": 180,
                    editoptions: {
                        "class": "", "rows": 5, "wrap": "off", "style": "width:200px",
                        //"readonly": "readonly"

                    },
              //      beforeSaveCell:function(rowid,name,val,iRow,iCol) {
			           //  // var row = $("#list").getRowData(rowid);
				          //// var row = $('#list').jqGrid('getRowData',rowid);
				          ////var currentRow= rowid;
              //          var ColValue = $("#jqGrid").jqGrid('getGridParam', 'selrow');

              //          var status = $("#jqGrid").jqGrid('getCell', ColValue, 'StatusId');
              //          alert("HI");

              //      },
              //      afterSaveCell: function(rowid,name,val,iRow,iCol) {
              //      alert("alert1!");
              //      },
                    //classes: "jqgrid-readonlycolumn"
                },
                {
                    label: 'ValidationStatus', name: 'ValidationStatus', width: 10, editable: false,hidden: true,

                    editoptions: { value: "True:False" }

                },
             //   {
             //       name: "",
             //       label: "Actions",
             //       width: 65,
             //       align: "center",
             //       formatter: "actions",
             //       formatoptions: {
             //           keys: true,
             //           delbutton: false,

             //           onEdit: function (rowid) {
             //               $("#" + rowid + "_StatusId").addClass("fit_Data");
             //    //alert("in onEdit: rowid="+rowid+"\nWe don't need return anything");
             //},
             //           //beforeShowForm: function (form) {

             //           //    //$("#tr_pid").find("input,button,textarea,select").attr("disabled", true);
             //           //},
             //           editformbutton: false,//Determines if popup should open or not
             //           afterSave: function (rowid, response, postdata, options) {
             //               //alert("success");
             //               //debugger;
             //               Show_HideEdit();
             //               $('#jqGrid').trigger( 'reloadGrid' );
             //              // debugger;
             //               //var Status_Id = $('#jqGrid').jqGrid('getCell', rowid, 'StatusId')
             //               //if (Status_Id == 1) {
             //               //    $('#jEditButton_' + rowid).hide();
             //               //    $('#jSaveButton_' + rowid).hide();
             //               //    $('#jCancelButton_' + rowid).hide();
             //               //    //jSaveButton_12
             //               //    //jCancelButton_12
             //               //}

             //           },
             //           processing:true
             //       }

             //   }

            ],
            loadonce: true,
            altRows: true,
            //rownumbers : true,
            //multiselect : true,
            width: 2000,
            colMenu: false,
            menubar: false,
            viewrecords: true,

            hoverrows: true,
            height: 400,
            rowNum: 1000,
            caption: '',
            sortable: false,
            grouping: false,
             rownumbers: true,
            rownumWidth: 45,
            reload: true,
            reloadAfterSubmit: true,
            pager: false,
            //pager: "#jqGridPager",
            sortname: 'SequenceNum',
            sortorder: 'asc',

            loadComplete: function () {
                //alert("mm");
                  $("#jqGrid").jqGrid("setLabel", "rn", "S.No");

            },
            gridComplete: function () {
               // alert("tdyt");
                var recs = $('#jqGrid').jqGrid('getGridParam', 'reccount');
                //debugger;
                if (isNaN(recs) || recs == 0) {
                    $('#export').hide();
                    $("#jqGrid").jqGrid('setGridState', 'hidden');

                }
                else {
                    $('#export').show();
                    $("#jqGrid").jqGrid('setGridState', 'visible');
                }
                //Show_HideEdit();

            }
            // set table stripped class in table style in bootsrap
        });

//        $grid.jqGrid("navButtonAdd", "#pager", {
//    id: "myButton",
//    onClickButton: function () {
//            }

//});
//        $("#jqGrid").jqGrid('navButtonAdd','#pager0',{
//    id:'ExportToExcel',
//    caption:'CSV',
//    title:'Export To CSV',
//    onClickButton : function(e)
//    {
//        //exportData(e, '#grid');
//    },
//    buttonicon: 'ui-icon ui-icon-document',
//});

//$("#jqGrid").jqGrid('navButtonAdd','#pager0',{
//    id:'ExportToPDF',
//    caption:'PDF',
//    title:'PDF',
//    onClickButton : function(e)
//    {
//       // exportPDF(e, '#grid');
//    },
//    buttonicon: 'ui-icon ui-icon-document',
//});
//$('#jqGrid').navGrid('#jqGridPager',
//    '#pager0',{
//    id:'ExportToExcel',
//    caption:'CSV',
//    title:'Export To CSV',
//    onClickButton : function(e)
//    {
//        //exportData(e, '#grid');
//    },
//    buttonicon: 'ui-icon ui-icon-document',
//});
        //$("#jqGrid").jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });
        @*function editRow(id) {
            // var Status_Id = $('#jqGrid').jqGrid('getCell', id, 'StatusId')
            //debugger;
            var UserType ="@Session["UserType"].ToString()"
            if (UserType == 'Customer'|| UserType == 'Consultant' )
            {
                //$("#" + id + "_StatusId option[value='3']").prop('disabled', 'disabled');
                //$("#" + id + "_StatusId option[value='4']").prop('disabled', 'disabled');
                //$("#" + id + "_StatusId option[value='5']").prop('disabled', 'disabled');

                $("#" + id + "_StatusId option[value='3']").hide();
                $("#" + id + "_StatusId option[value='4']").hide();
                $("#" + id + "_StatusId option[value='5']").hide();
            }
            else  if (UserType == 'Project Manager')
            {
                //$("#" + id + "_StatusId option[value='1']").prop('disabled', 'disabled');
                //$("#" + id + "_StatusId option[value='5']").prop('disabled', 'disabled');

                $("#" + id + "_StatusId option[value='1']").hide();
                $("#" + id + "_StatusId option[value='5']").hide();
            }



            //alert(id);


        }*@
        //$('#jqGrid').navGrid('#jqGridPager',
        //    // the buttons to appear on the toolbar of the grid
        //    { edit: false, add: false, del: false, search: false, refresh: false, view: false, position: "left", cloneToTop: false },
        //    // options for the Edit Dialog
        //    {
        //        editCaption: "The Edit Dialog",
        //        recreateForm: true,
        //        checkOnUpdate: true,
        //        checkOnSubmit: true,
        //        closeAfterEdit: true,
        //        reloadAfterSubmit:true,
        //          //editParams: myEditOptions,
        //        beforeShowForm: function (form) {
        //            //debugger;
        //            //alert('in');
        //            //$("#StatusId option[value='3']").attr("disabled", "disabled");
        //            //$("#StatusId option[value='4']").attr("disabled", "disabled");
        //            //$("#StatusId option[value='5']").attr("disabled","disabled");

        //        },
        //        errorTextFormat: function (data) {
        //            alert("in" + data.responseText);
        //            return 'Error: ' + data.responseText
        //        }
        //    },
        //    // options for the Add Dialog
        //    {
        //        closeAfterAdd: true,
        //        recreateForm: true,
        //        beforeShowForm: function (form) {

        //            //var nameColumnField = $('#tr_Task', form).show();
        //            //$('#tr_Task', form).show();

        //            //$('<tr class="FormData" id="tr_AddInfo"><td class="CaptionTD ui-widget-content"><b>Additional Information:</b></td></tr>').insertAfter (nameColumnField);
        //            // debugger;
        //            $('#PhaseId')
        //                .val(5)//AssumentID
        //                .prop("disabled", true);
        //            $("#tr_Task_Other_Environment").hide();
        //            $("#tr_Dependency").hide();
        //            $("#tr_Pending").hide();
        //            $("#tr_Delay_occurred").hide();
        //            $("#tr_StatusID").hide();
        //            $("#tr_EST_hours").hide();
        //            $("#tr_Actual_St_hours").hide();
        //            $("#tr_Planed__St_Date").hide();
        //            $("#tr_Actual_St_Date").hide();
        //            $("#tr_Planed__En_Date").hide();
        //            $("#tr_Actual_En_Date").hide();
        //            $("#tr_Notes").hide();
        //            // $grid.jqGrid('showCol', 'Id');
        //            //$grid.jqGrid(‘hideCol’, 'Task_Other_Environment');
        //            // debugger;
        //            //alert("Mano");
        //        },

        //        errorTextFormat: function (data) {
        //            return 'Error: ' + data.responseText
        //        }
        //    },
        //    // options for the Delete Dailog
        //    {
        //        errorTextFormat: function (data) {
        //            return 'Error: ' + data.responseText
        //        }
        //    },
        //    {
        //        multipleSearch: true,
        //        showQuery: false
        //    } // search options - define multiple search
        //);
        //jQuery("#jqGrid").removeClass('.table-striped');

        //document.body.style.zoom = "67%";
    }
    @*function Show_HideEdit() {
        var ids = jQuery("#jqGrid").jqGrid('getDataIDs');
        var User = '@Session["UserType"]';
        var loginid = '@Session["loginid"]';
        var j = 0;

         var UserType ="@Session["UserType"].ToString()"
        if (UserType == 'Project Manager')
        {

             for (var i = 0; i < ids.length; i++) {
                 var Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')

                 if (Status_Id == 1||Status_Id == 3) {
                     $('#jEditButton_' + ids[i]).hide();
                 }
                 else {
                      $('#jEditButton_' + ids[i]).show();
                 }

            }

        }
        else {
            var EST_hours = jQuery("#jqGrid").jqGrid('getColProp', 'EST_hours');
                EST_hours.editable = false;
             var Planed__St_Date = jQuery("#jqGrid").jqGrid('getColProp', 'Planed__St_Date');
            Planed__St_Date.editable = false;
            var Planed__En_Date = jQuery("#jqGrid").jqGrid('getColProp', 'Planed__En_Date');
                Planed__En_Date.editable = false;
            for (var i = 0; i < ids.length; i++) {

                var Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')
                if (Status_Id == 1|| Status_Id == 2) {
                    j = i;
                    //break;
                }
                $('#jEditButton_' + ids[i]).hide();
            }

            var EditFlag = false;
            //  debugger;
            for (var k = j; k < ids.length; k++) {
                var Status_Id = $('#jqGrid').jqGrid('getCell', ids[k], 'StatusId')
                if ((Status_Id == 5 || Status_Id == 2 ) && !EditFlag) {
                    $('#jEditButton_' + ids[k]).show();
                    EditFlag = true;
                }
                //else {
                //    $('#jEditButton_' + ids[k]).hide();
                //}
            }

             for (var i = 0; i < ids.length; i++) {
                var Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')
           if (Status_Id == 2) {
               $('#jEditButton_' + ids[i]).show();
                }

            }

            if (User == 'Consultant' || User == 'Customer') {
                for (var i = 0; i < ids.length; i++) {
                    var User_ID = $('#jqGrid').jqGrid('getCell', ids[i], 'UserID')
                    //var Status_Id = $('#jqGrid').jqGrid('getCell', ids[k], 'StatusId')
                    if (User_ID != loginid) {
                        $('#jEditButton_' + ids[i]).hide();
                    }
                }
            }
        }


    }*@
    function GetPhaseDropDown() {
        var Parameters = {};
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetPhase","ProjectMonitor")',
                    //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
                    dataType: "json",
					async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {
						 for (var i = 0; i < Data.length; i++) {
                           var obj = {};
                             var PhaseName = Data[i].PhaseName;
                            var key = ""+Data[i].Id;
                            Parameters[key] = PhaseName;
                        }
                    },
                    error: function (data) {
                        //alert("GetPhase fail");
                    }
                });
				return Parameters;
    }

     function GetApplicationAreaDropDown() {
				 var Parameters = {};
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetApplicationArea","ProjectMonitor")',
                    //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
                    dataType: "json",
					async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {
                        for (var i = 0; i < Data.length; i++) {

                           var obj = {};
                             var ApplicationArea = Data[i].ApplicationArea;
                            var key = ""+Data[i].Id;
                            Parameters[key] = ApplicationArea;
                        }
                    },
                    error: function (data) {
                        alert("GetApplicationArea fail");
                    }
                });
				return Parameters;
    }

    function GetPendingDropDown() {
				 var Parameters = {};
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetPending","ProjectMonitor")',
                    //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
                    dataType: "json",
					async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {
						 for (var i = 0; i < Data.length; i++) {
                           var obj = {};
                             var PendingName = Data[i].PendingName;
                            var key = ""+Data[i].Id;
                            Parameters[key] = PendingName;
                        }
                    },
                    error: function (data) {
                        //alert("fail");
                    }
                });
				return Parameters;

    }

    //function Delay_Data() {
    //    debugger;
    //    var Parameters = {};
    //    var DelayName = "Yes";
    //    var key = true;
    //    var DelayName1 = "No";
    //    var key1 = false;
    //    Parameters[key] = DelayName;
    //    Parameters[key1] = DelayName1;
    //    return Parameters;
    //}
    @*function GetTeamDropDown() {
		    var Parameters = {};
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetRole","ProjectMonitor")',
            //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
            dataType: "json",
		    async: false,
            contentType: "application/json; charset=utf-8",
            success: function (Data) {
				    for (var i = 0; i < Data.length; i++) {
                    var obj = {};
                        var RoleName = Data[i].RoleName;
                    var key = ""+Data[i].RoleId;
                    Parameters[key] = RoleName;
                }
            },
            error: function (data) {
                alert("fail");
            }
        });
	    return Parameters;

    }*@
    @*function GetConsultantDropDown() {
	    var Parameters = {};
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetConsultant","ProjectMonitor")',
            //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
            dataType: "json",
		    async: false,
            contentType: "application/json; charset=utf-8",
            success: function (Data) {
				    for (var i = 0; i < Data.length; i++) {
                    var obj = {};
                        var Name = Data[i].Name;
                    var key = ""+Data[i].Id;
                    Parameters[key] = Name;
                }
            },
            error: function (data) {
                alert("fail");
            }
        });
	    return Parameters;
    }*@
    function GetStatusDropDown() {
    var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetStatus","ProjectMonitor")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
        async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
             //debugger;
            var StatusName = "NO DATA";
            var key = 0;
            Parameters[key] = StatusName;
            for (var i = 0; i < Data.length; i++) {
                //var obj = {};
                var StatusName = Data[i].StatusName;
                var key = "" + Data[i].Id;
                Parameters[key] = StatusName;
            }
        },
        error: function (data) {
            //alert("GetStatus fail");
        }
    });
    return Parameters;
}
    function GetYesNo() {
	var Status = {
		'true': 'Yes', 'false': 'False'
	};

	return Status;

    }

    function GetUserDropDown() {
	var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetAllUser","ProjectMonitor")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
		async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
            //debugger;
            var Name1 = 'Not Assigned';
            var key1 = "00000000-0000-0000-0000-000000000000";
            Parameters[key1] = Name1;
				for (var i = 0; i < Data.length; i++) {
                var obj = {};
                    var Name = Data[i].Name;
                var key = ""+Data[i].UserId;
                Parameters[key] = Name;
            }

        },
        error: function (data) {
           // alert("GetAllUser fail");
        }
    });

	return Parameters;
    }
    function Confirm() {
        var input = $("<input />");
        var Result;
        input.attr("type", "hidden").attr("name", "confirm_value");
        if (confirm("Do you want to save data?")) {
            input.val("Yes");
            Result = true;
        } else {
            input.val("No");
            Result = false;
        }
        return Result;
    }
  function GetBlock() {
    var Parameters = {};
    $.ajax({
        type: "POST",
       url: '@Url.Action("GetBlock", "ProjectMonitor")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
		async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
				for (var i = 0; i < Data.length; i++) {
                var obj = {};
                var Name = Data[i].Block_Name;
                var key = "" + Data[i].block_ID;
                Parameters[key] = Name;
            }
        },
        error: function (data) {
            alert("GetAllUser fail");
        }
    });
	return Parameters;
    }
    $("#export").on("click", function () {
        //debugger;
        var sessionValueProject_Name = $("#hdnSessionProject_Name").val();
        var sessionValueInstance_Name = $("#hdnSessionInstance_Name").val();
        var description = 'Project Name :' + sessionValueProject_Name + ' && Instance Name :' + sessionValueInstance_Name;
        $("#jqGrid").jqGrid("exportToPdf", {
            title: 'PDF Export',
            orientation: 'landscape',
            pageSize: 'A3',
            description: description,
            customSettings: null,
            download: 'download',
            includeLabels: true,
            includeGroupHeader: true,
            includeFooter: true,
            fileName: "OverAllReportExport.pdf",
            onBeforeExport: function (doc) {
                //doc.content[0].table.headerRows = 2;
            }
            //header_logo: "~/Asset/images/ProACCTool.png",
        })
    })
</script>

@*<script type="text/javascript">
        function Confirm() {
            var input = $("<input />");
            input.attr("type", "hidden").attr("name", "confirm_value");
            if (confirm("Do you want to save data?")) {
                input.val("Yes");
            } else {
                input.val("No");
            }
            $("form")[0].appendChild(input[0]);
        }
    </script>*@
