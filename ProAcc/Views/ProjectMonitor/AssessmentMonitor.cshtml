
@{
    ViewBag.Title = "Assessment Monitor";
    Layout = "~/Views/shared/_Layout.cshtml";
}
@Styles.Render("~/Content/css/jqGrid")
@Scripts.Render("~/bundles/Scripts/jqGrid")
<style>
    .wrapColumnText
{
           white-space: normal !important;
           height:auto;
           vertical-align:text-top;
}
    .fit_Data {
        width: fit-content;
    }
</style>

    <a class="card-title">Assessment Monitor</a>
<script>
    //$.jgrid.defaults.width =1000;
    $.jgrid.defaults.responsive = true;
    $.jgrid.defaults.styleUI = 'Bootstrap4';
    $.jgrid.defaults.iconSet = "Octicons";
</script>
<style>
    .ui-jqgrid {
        font-size: 0.8rem
    }

    th.ui-th-column div {
        white-space: normal !important;
        height: auto !important;
        padding: 2px;
        text-align:center;
    }

    .ui-jqgrid .ui-jqgrid-view input, .ui-jqgrid .ui-jqgrid-view select, .ui-jqgrid .ui-jqgrid-view textarea, .ui-jqgrid .ui-jqgrid-view button {
        font-size: 11px !important;
    }

    .ui-jqgrid .ui-jqgrid-bdiv {
        overflow-y: scroll
    }

    #jqGridPager_center {
        visibility: hidden;
    }

    .fixed-sidebar .app-sidebar {
        height: 100% !important;
    }

    .app-main {
        flex: 1;
        display: flex;
        z-index: 8;
        position: relative;
        min-width: 100% !important;
    }

    .app-theme-white.app-container {
        background: #ffffff;
    }

    .app-container {
        min-height: 100%;
    }
</style>
<hr />
<div class="row instanceRow" style="padding: 1em;">
    <div class="col-lg-12 card">
        <div class="row">
            @if (User.IsInRole("Consultant") || User.IsInRole("Admin"))
            {
                <div class="col-md-4">
                    <div class="position-relative form-group">
                        <label for="exampleEmail" class="">Customer Name</label>
                        @Html.DropDownList("Customer", (IEnumerable<SelectListItem>)ViewBag.Customer, "-Select-", new { id = "IDCustomer", @class = "form-control" })
                        @*@Html.DropDownList("Project", (IEnumerable<SelectListItem>), "- SELECT-", new { id = "IDProject", @class = "form-control" })*@
                    </div>
                </div>
            }
            <div class="col-md-4">
                <label class="">Project Name</label>
                @if (User.IsInRole("Customer") || User.IsInRole("Project Manager"))
                {
                    @Html.DropDownList("Project", (IEnumerable<SelectListItem>)ViewBag.Project, "-Select-", new { id = "IDProject", @class = "form-control" })
                }
                else
                {
                    @Html.DropDownList("Project", new SelectList(Enumerable.Empty<SelectListItem>(), "IDProject", "ProjectName"),
                           "Select a Customer", new { id = "IDProject", @class = "form-control" })
                }
            </div>
            <div class="col-md-2">
                <label for="exampleEmail" class="">Instance Name</label>
                @Html.DropDownList("Instance", new SelectList(Enumerable.Empty<SelectListItem>(), "IDInstance", "InstanceName"),
                "-Select-", new { id = "IDInstance", @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label for="exampleEmail" class="">.</label>
                <button class="btn-wide mb-2 mr-2 btn btn-primary form-control" id="SubmitInstance">
                    Select Instance
                </button>
            </div>
        </div>
    </div>
</div>
<div style="margin-top:20px">
    <table id="jqGrid"></table>
    <div id="jqGridPager"></div>
</div>

<script>
    $(document).ready(function () {
            $("#IDInstance").prop("disabled", true);
            $('#SubmitInstance').prop("disabled", true);
    });
     $('#IDCustomer').change(function () {
            $("#IDInstance").prop("disabled", false);
            var id = $(this).val();
             var select = $("#IDProject");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
            $.ajax({
                type: "POST",
                url: '@Url.Action("LoadProject","Home")',
                data: { 'CustomerId' : id},
                success: function (data) {
                    var select = $("#IDProject");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
                    $.each(data, function (index, itemData) {
                        select.append($('<option/>', {
                            value: itemData.Value,
                            text: itemData.Text
                        }));
                    });
                    $("#IDProject").prop("disabled", false);
                    $("#IDInstance").prop("disabled", true);
                    $('#SubmitInstance').prop("disabled", true);
                },
                error: function (a) {
                    //debugger;
                    alert(a);
                }
            });
        });
    $('#IDProject').change(function () {

            var id = $(this).val();
			$('#SubmitInstance').prop("disabled", true);
             var select = $("#IDInstance");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
            $.ajax({
                type: "POST",
                url: '@Url.Action("LoadInstanceforResource","Home")',
                data: { 'ProjectId' : id},
                success: function (data) {
                    var select = $("#IDInstance");
                    select.empty();
                    select.append($('<option/>', {
                        value: 0,
                        text: "-Select-"
                    }));
                    if (data.length > 0) {
                        $.each(data, function (index, itemData) {
                            select.append($('<option/>', {
                                value: itemData.Value,
                                text: itemData.Text
                            }));
                        });
                        $("#IDInstance").prop("disabled", false);
                    }
                    else {
                        $("#IDInstance").prop("disabled", true);
						$('#SubmitInstance').prop("disabled", true);
                    }
                },
                error: function (a) {
                    alert(a);
                }
            });
            });
    $('#IDInstance').change(function () {
                var id = $(this).val();
                if (id == ""||id =="0") {
                     $('#SubmitInstance').prop("disabled", true);
                } else {
					$('#SubmitInstance').prop("disabled", false);
                }
            });
   $('#SubmitInstance').click(function () {
        var IDInstance = $("#IDInstance").val();
        $.ajax({
            //url: '<%: Url.Action("Upload")%>?Cust_ID=' + Cust_ID + '&IDProject=' + IDProject+'&InstanceID='+InstanceID,
            url: '@Url.Action("SubmitInstance", "Home")',
            type: "POST",
            data: { 'IDInstance': IDInstance },
            success: function (result) {
                Notiflix.Notify.Success('New Live Instance updated !', { cssAnimationStyle: 'zoom', cssAnimationDuration: 500, });
                 LoadTable(IDInstance);
        $('#jqGrid').trigger('reloadGrid');
            }
        });
   });
    
</script>

<script>
    //document.body.style.zoom = "67%";
    document.body.style.zoom = "90%";
    $(document).ready(function () {
        $(".app-main__outer").css("height", "595px");
    });
    function LoadTable(Instance) {
        
        $.jgrid.styleUI.Bootstrap.base.rowTable = "table table-bordered";
    
        var Planed_StartDate = function (element, options) {
            var ID = options.rowId;
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            $(element).datepicker({
                duration: "slow",
                // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                onClose: function (selectedDate) {
                    $("#" + ID + "_Planed__En_Date").datepicker("option", "minDate", selectedDate);
                    //$("#" + ID + "_Actual_St_Date").datepicker("option", "minDate", selectedDate);
                    //$("#" + ID + "_Actual_En_Date").datepicker("option", "minDate", selectedDate);
                },
            });//.datepicker("setDate", new Date());
             //}).datepicker();
        };
        var Planed_EndDate = function (element, options) {
           var ID = options.rowId;
            //var ST_Date=$('#').val();
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            $(element).datepicker({
                duration: "slow",
                // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                onClose: function (selectedDate) {
                    $("#" + ID + "_Planed__St_Date").datepicker("option", "maxDate", selectedDate);
                    //$("#" + ID + "_Actual_St_Date").datepicker("option", "maxDate", selectedDate);
                    //$("#" + ID + "_Actual_En_Date").datepicker("option", "maxDate", selectedDate);
                }
            });//.datepicker("setDate", new Date());
            // }).datepicker();
        };


        var Actual_St_Date = function (element, options) {
            var ID = options.rowId;
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            //var selectedDate = $("#" + ID + "_Planed__St_Date").val();
            //debugger;
            //$("#" + ID + "_Actual_St_Date").datepicker("option" "minDate", new Date());
            //var d=$("#jqGrid").jqGrid('getGridParam', 'selrow');
            var Date = $('#jqGrid').jqGrid('getCell', ID, 'Planed__St_Date');
            //debugger;
            $(element).datepicker({
                duration: "slow",
                // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                minDate: Date,
                onClose: function (selectedDate) {
                    $("#" + ID + "_Actual_En_Date").datepicker("option", "minDate", selectedDate);
                    //$("#" + ID + "_Planed__En_Date").datepicker("option", "maxDate", selectedDate);
                },
            });//.datepicker("setDate", new Date());
            // }).datepicker();
        };
        var Actual_En_Date = function (element, options) {
           var ID = options.rowId;
            //var ST_Date=$('#').val();
            $(element).on('keypress', function (e) {
                e.preventDefault();
            })
            $(element).datepicker({
                duration: "slow",
                // defaultDate: +1,
                //altFormat: "mm/dd/yy",
                dateFormat: "dd/mm/yy",
                autoSize: false,
                changeYear: true,
                changeMonth: true,
                showButtonPanel: false,
                showWeek: false,
                showButtonPanel: true,
                onClose: function (selectedDate) {
                    $("#" + ID + "_Actual_St_Date").datepicker("option", "maxDate", selectedDate);
                    //$("#" + ID + "Planed_EndDate").datepicker("option", "maxDate", selectedDate);

                }
            });//.datepicker("setDate", new Date());
            // }).datepicker();
        };
       
        $("#jqGrid").jqGrid({
            url: "@Url.Action("GetData","ProjectMonitor",new { Phase_ID= ViewBag.PhaseID})",
            datatype: "json",
           // editurl: "@Url.Action("SubmitProjectMonitor","ProjectMonitor")",
            colModel: [
                {
                    label: 'Id', name: 'Id', index: 'Id', width: 70,
                     align: 'center', editable: true, hidden: true,
                },
                {
                    label: 'Phase', name: 'PhaseId', index: 'PhaseId', width: 70,
                     align: 'center', editable: true, hidden: true, edittype: 'custom',
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editrules: {
                        required: true,
                        edithidden: true
                    },
                    editoptions: {
                        value: GetPhaseDropDown()
                    }
                },
                {
                    label: 'Activity / Task ', name: 'Task', width: 150,  editable: true, hidden: true,classes: 'wrapColumnText',
                    editrules: {
                        required: true,
                        edithidden: true
                    }

                },
                {
                    label: 'Activity / Task ', name: 'Task', width: 150, editable: false ,classes: 'wrapColumnText',


                },
                {
                    label: 'Application Area', name: 'ApplicationArea', width: 100,  editable: false,classes: 'wrapColumnText',


                },
                {
                    label: 'Sequence ', name: 'SequenceNum', width: 50,  editable: true, hidden: true,
                    editrules: {
                        required: true,
                        edithidden: true
                    },
                    editoptions: {
                        size: 15, maxlengh: 10,
                        dataInit: function (element) {
                            $(element).keypress(function (e) {
                                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                                    return false;
                                }
                            });
                        }
                    }

                },
                {
                    label: 'Task Other Env. (Y/N)',
                    name: 'Task_Other_Environment', width: 55, editable: true,hidden: true ,
                    edittype: 'checkbox', editoptions: { value: "True:False" }, formatter: "checkbox",

                },
                {
                    label: 'Dependency (Y/N)',
                    name: 'Dependency', width: 72,editable: true,hidden: true,
                    edittype: 'checkbox', editoptions: { value: "True:False" }, formatter: "checkbox",
                },
                { label: 'Pending With ', name: 'Pending', width: 100,  editable: true ,hidden: true},
                {
                    label: 'Delay', name: 'Delay_occurred', width: 30,  editable: true, align: 'center',
                    edittype: 'checkbox',
                    editoptions: { value: "True:False" }
                    , formatter: "checkbox",
                },
                {
                    label: 'Owner', name: 'UserID', index: 'UserID', width: 75, align: 'center', editable: false,
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetUserDropDown()
                    }
                },
                {
                    label: 'Status', name: 'StatusId', index: 'StatusId', width: 100,  align: 'center', editable: true,
                    cellEdit: true, edittype: 'select', formatter: 'select',
                    editoptions: {
                        value: GetStatusDropDown()
                    },
                },
                {
                    label: 'Est.(hrs)', name: 'EST_hours', width: 55,
                    editable: true,
                    editrules: { },
                    editoptions: {
                        dataInit: function (element) {
                            $(element).keyup(function(event) {
     
                                this.value = this.value
                                  .replace(/[^\d:]/g, '')             // numbers and decimals only
                                  .replace(/(^[\d]{2})[\d]/g, '$1')   // not more than 2 digits at the beginning
                                  .replace(/(\::*)\:/g, '$1')         // decimal can't exist more than once
                                  //.replace(/(\:[\d]{2})./g, '$1');    // not more than 4 digits after decimal
                                   .replace(/(\:[0-5][0-9]{1})./g, '$1'); 
                
                            });
                            
                        }
                    }
                },
                {
                    label: 'Actual (hrs)', name: 'Actual_St_hours',
                    width: 55, editable: true,
                    editoptions: {
                         dataInit: function (element) {
                            $(element).keyup(function (event) {
                                
                                this.value = this.value
                                  .replace(/[^\d:]/g, '')             // numbers and decimals only
                                  .replace(/(^[\d]{2})[\d]/g, '$1')   // not more than 2 digits at th\e beginning
                                  .replace(/(\::*)\:/g, '$1')         // decimal can't exist more than once
                                  //.replace(/(\:[\d]{2})./g, '$1')    // not more than 4 digits after decimal
                                  .replace(/(\:[0-5][0-9]{1})./g, '$1');  
                                //.replace(/(^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9]))./g, '$1');    
                                   
                
                            });  
                           
                        }
                       
                    }
                },
                {
                    label: 'Planned Start Date', name: 'Planed__St_Date',
                    width: 80, align: "center",  formatter: "date", formatoptions: { altFormat: "dd-mm-yy", newformat: "d/m/Y" }, editable: true,
                    editoptions: { dataInit: Planed_StartDate, classes: 'DateClass' }
                },
                {
                    label: 'Actual Start Date', name: 'Actual_St_Date',
                    width: 75, align: "center",  formatter: "date", formatoptions: { altFormat: "dd-mm-yy", newformat: "d/m/Y" }, editable: true,
                    editoptions: { dataInit: Actual_St_Date }

                },
                {
                    label: 'Planned End Date', name: 'Planed__En_Date',
                    width: 75, align: "center",  formatter: "date", formatoptions: { newformat: "d/m/Y" }, editable: true
                    ,
                    editoptions: { dataInit: Planed_EndDate }
                },
                {
                    label: 'Actual End Date', name: 'Actual_En_Date',
                    width: 75, align: "center",  formatter: "date", formatoptions: { newformat: "d/m/Y" }, editable: true
                    ,
                    editoptions: { dataInit: Actual_En_Date }
                },
                {
                    label: 'Comments', name: 'Notes', edittype: "textarea",classes: 'wrapColumnText',
                    wrap: "on"
                    ,editrules: { "edithidden": true }, "editable": true, "width": 100,
                    editoptions: {
                        "class": "", "rows": 5, "wrap": "off", "style": "width:200px",
                    },
                },
                {
                    label: 'ValidationStatus', name: 'ValidationStatus', width: 10, editable: false,hidden: true,

                    editoptions: { value: "True:False" }

                },
                {
                    name: "",
                    label: "Actions",
                    width: 65,
                    align: "center",
                    formatter: "actions",
                    formatoptions: {
                        keys: true,
                        delbutton: false,

                        onEdit: function (rowid) {
                            $("#" + rowid + "_StatusId").addClass("fit_Data");
             },
                       
                        editformbutton: false,//Determines if popup should open or not
                        afterSave: function (rowid, response, postdata, options) {
                            Show_HideEdit();
                            $('#jqGrid').trigger( 'reloadGrid' );
                        },
                        processing:true
                    }

                }

            ],
            loadonce: false,
            altRows: true,
            //rownumbers : true,
            //multiselect : true,
            width: 2000,
            colMenu: false,
            menubar: false,
            viewrecords: true,
            hoverrows: true,
            height: 400,
            rowNum: 1000,
            caption: '',
            sortable: false,
            grouping: false,
            rownumbers: true,
            reload: true,
            reloadAfterSubmit:true,
            pager: "#jqGridPager",
            sortname: 'SequenceNum',
            sortorder: 'asc',
            onSelectRow: editRow,
            
            serializeRowData: function (postdata) {
                
                var ColValue = $("#jqGrid").jqGrid('getGridParam', 'selrow');

                var EST_hours = $("#jqGrid").jqGrid('getCell', ColValue, 'EST_hours');
                var Actual_St_hours=$("#jqGrid").jqGrid('getCell', ColValue, 'Actual_St_hours');
                var Planed__St_Date = $("#jqGrid").jqGrid('getCell', ColValue, 'Planed__St_Date');
                var Planed__En_Date = $("#jqGrid").jqGrid('getCell', ColValue, 'Planed__En_Date');
                var Actual_St_Date = $("#jqGrid").jqGrid('getCell', ColValue, 'Actual_St_Date');
                var Actual_En_Date = $("#jqGrid").jqGrid ('getCell', ColValue, 'Actual_En_Date');
                //filterResult = JSON.stringify(newResult);
                var Id = postdata.Id;
                var Task_Other_Environment = postdata.Task_Other_Environment;
                var Dependency = postdata.Dependency;
                var Pending = postdata.Pending;
                var Delay_occurred = postdata.Delay_occurred;
                var StatusId = postdata.StatusId;   
                var Notes = postdata.Notes;
                //var EST_hours = EST_hours;
                //var Planed__St_Date = Planed__St_Date;
                //var Planed__En_Date = Planed__En_Date;
                var EST_hours;
                var Actual_St_hours;
                var Planed__St_Date;
                var Planed__En_Date;                
                var Actual_St_Date;
                var Actual_En_Date;
                //if (Notes == "") {
                //    alert("HI");
                   
                //}
                 var UserType ="@Session["UserType"].ToString()"
                if (UserType == 'Project Manager') {
                    EST_hours = postdata.EST_hours;
                    EST_hours = EST_hours.replace(":", ".");
                    Actual_St_hours = Actual_St_hours;
                     Actual_St_hours = Actual_St_hours.replace(":", ".");
                    Planed__St_Date = postdata.Planed__St_Date;
                    Planed__En_Date = postdata.Planed__En_Date;
                     Actual_St_Date = Actual_St_Date;
                    Actual_En_Date = Actual_En_Date;
                }
                else {
                    EST_hours = EST_hours;
                    EST_hours = EST_hours.replace(":", ".");
                     Actual_St_hours = postdata.Actual_St_hours;
                     Actual_St_hours = Actual_St_hours.replace(":", ".");
                     Planed__St_Date = Planed__St_Date;
                    Planed__En_Date = Planed__En_Date;
                    Actual_St_Date = postdata.Actual_St_Date;
                    Actual_En_Date = postdata.Actual_En_Date;
                }

                var Message;
                if (StatusId == 1 ||StatusId == 3 ) {
                    Message = 'Are you sure..? <br><strong>Once you confirm. You won\'t be able to make any change..!</strong>';
                }
                else {
                    Message='Do you Want to Save the Task?'
                }
                Notiflix.Confirm.Show('ProAcc Info. Confirm..!',
                    Message, 'Yes', 'No',
                    function () {
                        $.ajax({
                                            type: "POST",
                                            url: '@Url.Action("SubmitProjectMonitor","ProjectMonitor",new { Phase_ID= ViewBag.PhaseID})',
                                            data: {
                                                'Id': "" + Id + "",
                                                'StatusId': StatusId,
                                                'Task_Other_Environment': Task_Other_Environment,
                                                'Dependency': Dependency,
                                                'Pending': Pending,
                                                'Delay_occurred': Delay_occurred,
                                                'EST_hours': EST_hours,
                                                'Actual_St_hours': Actual_St_hours,
                                                'Planed__St_Date': Planed__St_Date,
                                                'Planed__En_Date': Planed__En_Date,
                                                'Actual_St_Date': Actual_St_Date,
                                                'Actual_En_Date': Actual_En_Date,
                                                'Notes': Notes
                                            },
                            success: function (Result) {
                                                 $('#jqGrid').trigger('reloadGrid');
                                               
                                            }
                                                
                                        });
                        // Yes button callbackalert('Thank you.');
                    }, function () {
                        // No button callbackalert('If you say so...');
                    });
            },
            afterrestorefunc: function (response) {
                //alert("afterrestorefunc");
    },
    
            loadComplete: function () {
                //alert("mm");
                var ids = jQuery("#jqGrid").jqGrid('getDataIDs');
                //debugger;
                for (var i = 0; i < ids.length; i++) {
                    var EST_hours = $('#jqGrid').jqGrid('getCell', ids[i], 'EST_hours')
                    EST_hours = EST_hours.replace(".", ":")
                    $('#jqGrid').jqGrid('setCell', ids[i], 'EST_hours', EST_hours);
                    
                    var Actual_St_hours = $('#jqGrid').jqGrid('getCell', ids[i], 'Actual_St_hours')
                    Actual_St_hours = Actual_St_hours.replace(".", ":")
                    $('#jqGrid').jqGrid('setCell', ids[i], 'Actual_St_hours',Actual_St_hours);
                }

            },
            gridComplete: function () {
               // alert("tdyt");
                var recs = $('#jqGrid').jqGrid('getGridParam', 'reccount');

                if (isNaN(recs) || recs == 0) {
                    $("#jqGrid").jqGrid('setGridState', 'hidden');
                }
                else {
                    $("#jqGrid").jqGrid('setGridState', 'visible');
                }
                Show_HideEdit();



            }
            // set table stripped class in table style in bootsrap
        });

        function editRow(id) {
            //$('#jqGrid').jqGrid('setColProp', 'actions', { editable: false }); 
            // var Status_Id = $('#jqGrid').jqGrid('getCell', id, 'StatusId')
            //debugger;
            var UserType ="@Session["UserType"].ToString()"
            if (UserType == 'Customer'|| UserType == 'Consultant' )
            {
                //$("#" + id + "_StatusId option[value='3']").prop('disabled', 'disabled');
                //$("#" + id + "_StatusId option[value='4']").prop('disabled', 'disabled');
                //$("#" + id + "_StatusId option[value='5']").prop('disabled', 'disabled');

                $("#" + id + "_StatusId option[value='3']").hide();
                $("#" + id + "_StatusId option[value='4']").hide();
                $("#" + id + "_StatusId option[value='5']").hide();
            }
            else  if (UserType == 'Project Manager')
            {
                //$("#" + id + "_StatusId option[value='1']").prop('disabled', 'disabled');
                //$("#" + id + "_StatusId option[value='5']").prop('disabled', 'disabled');

                $("#" + id + "_StatusId option[value='1']").hide();
                $("#" + id + "_StatusId option[value='2']").hide();
                //$("#" + id + "_StatusId option[value='5']").hide();


              //  var rows = jqGrid.rows, cRows = rows.length
                //for (var i = 1; i < ids.length; i++) {
                //    row = rows[iRow]; // row.id is the rowid
                //    if (row != row.id) {
                //       // $(row).addClass('not-editable-row');
                //      //  var v = myGrid.jqGrid('getCell', row, 'act');

                //        // hide the edit/delete buttons on non-editable rows (not the row we are editing)
                //        //$("#jqGrid tr#" + row.id + " .ui-inline-edit").hide();
                //        //$("#jqGrid tr#" + row.id + " .ui-inline-del").hide();
                //        $('#jEditButton_' + ids[i]).hide();
                //    }
                //    else {
                //        // show the edit/delete buttons for the current row
                //        //$("#jqGrid tr#" + row.id + " .ui-inline-edit").show();
                //        //$("#jqGrid tr#" + row.id + " .ui-inline-del").show();
                //        $('#jEditButton_' + ids[i]).show();
                //    }
                //}
            }


            // var ids = jQuery("#jqGrid").jqGrid('getDataIDs');

//            function textReadOnly(cellValue, options, rowdata, action) {
//    if (rowdata.stateId == 4) {
//        return "<input value='"+ rowdata.stateId +"' readonly='true'></input>";
//    } else {
//        return "<input value='"+ rowdata.stateId +"'></input>";
//    }
//}
           //jCancelButton_2
            //var cm = jQuery("#jqGrid").jqGrid('getColProp', 'Actions');
            //cm.editable = false;
            //if (UserType == 'Project Manager')
            //{
            //    for (var i = 0; i < ids.length; i++) {
            //        //var Actions = $('#jqGrid').jqGrid('getCell', ids[i], 'Actions')
                    
            //      //  $('#jEditButton_' + ids[i]).attr(readonly='true');
            //        // $('#jEditButton_' + ids[i]).prop('readonly', 'readonly');
            //        if (id != i) {
            //            $('#jEditButton_' + ids[i]).hide();
            //        }
            //        else {
            //            $('#jEditButton_' + ids[i]).show();
            //        }
                    

            //       // $('#jEditButton_' + ids[i]).attr('disabled', 'disabled');

            //         //$('#jEditButton_' + ids[i]).hide();
            //        //$(this).attr("readonly", false);
            //        //jEditButton_3
            //    }
            //}
            //alert(id);
        }
        $('#jqGrid').navGrid('#jqGridPager',
            // the buttons to appear on the toolbar of the grid
            { edit: false, add: false, del: false, search: false, refresh: true, view: false, position: "left", cloneToTop: false },
            // options for the Edit Dialog
            {
                editCaption: "The Edit Dialog",
                recreateForm: true,
                checkOnUpdate: true,
                checkOnSubmit: true,
                closeAfterEdit: true,
                reloadAfterSubmit:true,
                  //editParams: myEditOptions,
                beforeShowForm: function (form) {

                   
                    
                },
                errorTextFormat: function (data) {
                    alert("in" + data.responseText);
                    return 'Error: ' + data.responseText
                }
            },
            // options for the Add Dialog
            {
                closeAfterAdd: true,
                recreateForm: true,
                beforeShowForm: function (form) {

                    //var nameColumnField = $('#tr_Task', form).show();
                    //$('#tr_Task', form).show();

                    //$('<tr class="FormData" id="tr_AddInfo"><td class="CaptionTD ui-widget-content"><b>Additional Information:</b></td></tr>').insertAfter (nameColumnField);
                    // debugger;
                    $('#PhaseId')
                        .val(5)//AssumentID
                        .prop("disabled", true);
                    $("#tr_Task_Other_Environment").hide();
                    $("#tr_Dependency").hide();
                    $("#tr_Pending").hide();
                    $("#tr_Delay_occurred").hide();
                    $("#tr_StatusID").hide();
                    $("#tr_EST_hours").hide();
                    $("#tr_Actual_St_hours").hide();
                    $("#tr_Planed__St_Date").hide();
                    $("#tr_Actual_St_Date").hide();
                    $("#tr_Planed__En_Date").hide();
                    $("#tr_Actual_En_Date").hide();
                    $("#tr_Notes").hide();
                    // $grid.jqGrid('showCol', 'Id');
                    //$grid.jqGrid(‘hideCol’, 'Task_Other_Environment');
                    // debugger;
                    //alert("Mano");
                },

                errorTextFormat: function (data) {
                    return 'Error: ' + data.responseText
                }
            },
            // options for the Delete Dailog
            {
                errorTextFormat: function (data) {
                    return 'Error: ' + data.responseText
                }
            },
            {
                multipleSearch: true,
                showQuery: false
            } // search options - define multiple search
        );

    }

   
    function Show_HideEdit() {
        var ids = jQuery("#jqGrid").jqGrid('getDataIDs');
        var User = '@Session["UserType"]';
        var loginid = '@Session["loginid"]';
        var j = 0;

         var UserType ="@Session["UserType"].ToString()"
        if (UserType == 'Project Manager')
        {
            var WIP_Status=false;
             for (var i = 0; i < ids.length; i++) {
                 var Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')
                 if (Status_Id==2) {
                     WIP_Status = true;
                 }
                 if (Status_Id == 1||Status_Id == 3) {
                     $('#jEditButton_' + ids[i]).hide();
                 }
                 else {
                      $('#jEditButton_' + ids[i]).show();
                 }

            }
            if (WIP_Status) {
                for (var i = 0; i < ids.length; i++) {
                    var Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')
                     if (Status_Id == 4) {
                     $('#jEditButton_' + ids[i]).hide();
                 }
                }
            }
            
             var Actual_St_hours = jQuery("#jqGrid").jqGrid('getColProp', 'Actual_St_hours');
                Actual_St_hours.editable = false;
             var Actual_St_Date = jQuery("#jqGrid").jqGrid('getColProp', 'Actual_St_Date');
                 Actual_St_Date.editable = false;
            var Actual_En_Date = jQuery("#jqGrid").jqGrid('getColProp', 'Actual_En_Date');
                Actual_En_Date.editable = false;   
        }
        else {
            var EST_hours = jQuery("#jqGrid").jqGrid('getColProp', 'EST_hours');
                EST_hours.editable = false;
             var Planed__St_Date = jQuery("#jqGrid").jqGrid('getColProp', 'Planed__St_Date');
                 Planed__St_Date.editable = false;
            var Planed__En_Date = jQuery("#jqGrid").jqGrid('getColProp', 'Planed__En_Date');
                Planed__En_Date.editable = false;
            for (var i = 0; i < ids.length; i++) {
               
                var Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')
                if (Status_Id == 1|| Status_Id == 2) {
                    j = i;
                    //break;
                }
                $('#jEditButton_' + ids[i]).hide();
            }

            var EditFlag = false;
            //  debugger;
            for (var k = j; k < ids.length; k++) {
                var Status_Id = $('#jqGrid').jqGrid('getCell', ids[k], 'StatusId')
                if ((Status_Id == 5 || Status_Id == 2 ) && !EditFlag) {
                    $('#jEditButton_' + ids[k]).show();
                    EditFlag = true;
                }
                //else {
                //    $('#jEditButton_' + ids[k]).hide();
                //}
            }

             for (var i = 0; i < ids.length; i++) {
                var Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')
           if (Status_Id == 2) {
               $('#jEditButton_' + ids[i]).show();
               //for (var j = 0; j < ids.length; j++) {
               //     Status_Id = $('#jqGrid').jqGrid('getCell', ids[i], 'StatusId')
               //     if (j != i) {

               //         if (Status_Id!=4) {
               //             $('#jEditButton_' + ids[j]).hide();
               //         }
                            
               //          }
               //      }
                }

            }

            if (User == 'Consultant' || User == 'Customer') {
                for (var i = 0; i < ids.length; i++) {
                    var User_ID = $('#jqGrid').jqGrid('getCell', ids[i], 'UserID')
                    //var Status_Id = $('#jqGrid').jqGrid('getCell', ids[k], 'StatusId')
                    if (User_ID != loginid) {
                        $('#jEditButton_' + ids[i]).hide();
                    }
                }
            }
        }
    }


    function GetPhaseDropDown() {
				 var Parameters = {};
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetPhase","ProjectMonitor")',
                    //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
                    dataType: "json",
					async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {
						 for (var i = 0; i < Data.length; i++) {
                           var obj = {};
                             var PhaseName = Data[i].PhaseName;
                            var key = ""+Data[i].Id;
                            Parameters[key] = PhaseName;
                        }
                    },
                    error: function (data) {
                        alert("GetPhase fail");
                    }
                });
				return Parameters;
            }
    function GetPendingDropDown() {
				 var Parameters = {};
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetPending","ProjectMonitor")',
                    //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
                    dataType: "json",
					async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (Data) {
						 for (var i = 0; i < Data.length; i++) {
                           var obj = {};
                             var PendingName = Data[i].PendingName;
                            var key = ""+Data[i].Id;
                            Parameters[key] = PendingName;
                        }
                    },
                    error: function (data) {
                        alert("fail");
                    }
                });
				return Parameters;

            }
   
    function GetStatusDropDown() {
    var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetStatus","ProjectMonitor")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
        async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
             //debugger;
            for (var i = 0; i < Data.length; i++) {
                //var obj = {};
                var StatusName = Data[i].StatusName;
                var key = "" + Data[i].Id;
                Parameters[key] = StatusName;
            }
        },
        error: function (data) {
            alert("GetStatus fail");
        }
    });
    return Parameters;
}
    function GetYesNo() {
	var Status = {
		'true': 'Yes', 'false': 'False'
	};

	return Status;

    }

    function GetUserDropDown() {
	var Parameters = {};
    $.ajax({
        type: "POST",
        url: '@Url.Action("GetAllUser","ProjectMonitor")',
        //data: '{Phase: ' + JSON.stringify(Phase) + ',condition:' + JSON.stringify(condition) + '}',
        dataType: "json",
		async: false,
        contentType: "application/json; charset=utf-8",
        success: function (Data) {
            //debugger;
				for (var i = 0; i < Data.length; i++) {
                var obj = {};
                    var Name = Data[i].Name;
                var key = ""+Data[i].UserId;
                Parameters[key] = Name;
            }
        },
        error: function (data) {
            alert("GetAllUser fail");
        }
    });
	return Parameters;
    }
    function Confirm() {
        var input = $("<input />");
        var Result;
        input.attr("type", "hidden").attr("name", "confirm_value");
        if (confirm("Do you want to save data?")) {
            input.val("Yes");
            Result = true;
        } else {
            input.val("No");
            Result = false;
        }
        return Result;
    }

</script>
